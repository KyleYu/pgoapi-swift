// Generated by the Protocol Buffers 3.2 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Settings.Master.Pokemon.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public extension Pogoprotos.Settings.Master.Pokemon {
  public struct PogoprotosSettingsMasterPokemonRoot {
    public static let `default` = PogoprotosSettingsMasterPokemonRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(registry: extensionRegistry)
      Pogoprotos.Enums.PogoprotosEnumsRoot.default.registerAllExtensions(registry: extensionRegistry)
      Pogoprotos.Inventory.Item.PogoprotosInventoryItemRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
  }

  final public class CameraAttributes : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Settings.Master.Pokemon.CameraAttributes, rhs: Pogoprotos.Settings.Master.Pokemon.CameraAttributes) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasDiskRadiusM == rhs.hasDiskRadiusM) && (!lhs.hasDiskRadiusM || lhs.diskRadiusM == rhs.diskRadiusM)
      fieldCheck = fieldCheck && (lhs.hasCylinderRadiusM == rhs.hasCylinderRadiusM) && (!lhs.hasCylinderRadiusM || lhs.cylinderRadiusM == rhs.cylinderRadiusM)
      fieldCheck = fieldCheck && (lhs.hasCylinderHeightM == rhs.hasCylinderHeightM) && (!lhs.hasCylinderHeightM || lhs.cylinderHeightM == rhs.cylinderHeightM)
      fieldCheck = fieldCheck && (lhs.hasCylinderGroundM == rhs.hasCylinderGroundM) && (!lhs.hasCylinderGroundM || lhs.cylinderGroundM == rhs.cylinderGroundM)
      fieldCheck = fieldCheck && (lhs.hasShoulderModeScale == rhs.hasShoulderModeScale) && (!lhs.hasShoulderModeScale || lhs.shoulderModeScale == rhs.shoulderModeScale)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var diskRadiusM:Float = Float(0)
    public fileprivate(set) var hasDiskRadiusM:Bool = false

    public fileprivate(set) var cylinderRadiusM:Float = Float(0)
    public fileprivate(set) var hasCylinderRadiusM:Bool = false

    public fileprivate(set) var cylinderHeightM:Float = Float(0)
    public fileprivate(set) var hasCylinderHeightM:Bool = false

    public fileprivate(set) var cylinderGroundM:Float = Float(0)
    public fileprivate(set) var hasCylinderGroundM:Bool = false

    public fileprivate(set) var shoulderModeScale:Float = Float(0)
    public fileprivate(set) var hasShoulderModeScale:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasDiskRadiusM {
        try codedOutputStream.writeFloat(fieldNumber: 1, value:diskRadiusM)
      }
      if hasCylinderRadiusM {
        try codedOutputStream.writeFloat(fieldNumber: 2, value:cylinderRadiusM)
      }
      if hasCylinderHeightM {
        try codedOutputStream.writeFloat(fieldNumber: 3, value:cylinderHeightM)
      }
      if hasCylinderGroundM {
        try codedOutputStream.writeFloat(fieldNumber: 4, value:cylinderGroundM)
      }
      if hasShoulderModeScale {
        try codedOutputStream.writeFloat(fieldNumber: 5, value:shoulderModeScale)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasDiskRadiusM {
        serialize_size += diskRadiusM.computeFloatSize(fieldNumber: 1)
      }
      if hasCylinderRadiusM {
        serialize_size += cylinderRadiusM.computeFloatSize(fieldNumber: 2)
      }
      if hasCylinderHeightM {
        serialize_size += cylinderHeightM.computeFloatSize(fieldNumber: 3)
      }
      if hasCylinderGroundM {
        serialize_size += cylinderGroundM.computeFloatSize(fieldNumber: 4)
      }
      if hasShoulderModeScale {
        serialize_size += shoulderModeScale.computeFloatSize(fieldNumber: 5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
      return Pogoprotos.Settings.Master.Pokemon.CameraAttributes.classBuilder() as! Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
      return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Pokemon.CameraAttributes) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
      return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasDiskRadiusM {
        jsonMap["diskRadiusM"] = Float(diskRadiusM)
      }
      if hasCylinderRadiusM {
        jsonMap["cylinderRadiusM"] = Float(cylinderRadiusM)
      }
      if hasCylinderHeightM {
        jsonMap["cylinderHeightM"] = Float(cylinderHeightM)
      }
      if hasCylinderGroundM {
        jsonMap["cylinderGroundM"] = Float(cylinderGroundM)
      }
      if hasShoulderModeScale {
        jsonMap["shoulderModeScale"] = Float(shoulderModeScale)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
      return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
      return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasDiskRadiusM {
        output += "\(indent) diskRadiusM: \(diskRadiusM) \n"
      }
      if hasCylinderRadiusM {
        output += "\(indent) cylinderRadiusM: \(cylinderRadiusM) \n"
      }
      if hasCylinderHeightM {
        output += "\(indent) cylinderHeightM: \(cylinderHeightM) \n"
      }
      if hasCylinderGroundM {
        output += "\(indent) cylinderGroundM: \(cylinderGroundM) \n"
      }
      if hasShoulderModeScale {
        output += "\(indent) shoulderModeScale: \(shoulderModeScale) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasDiskRadiusM {
               hashCode = (hashCode &* 31) &+ diskRadiusM.hashValue
            }
            if hasCylinderRadiusM {
               hashCode = (hashCode &* 31) &+ cylinderRadiusM.hashValue
            }
            if hasCylinderHeightM {
               hashCode = (hashCode &* 31) &+ cylinderHeightM.hashValue
            }
            if hasCylinderGroundM {
               hashCode = (hashCode &* 31) &+ cylinderGroundM.hashValue
            }
            if hasShoulderModeScale {
               hashCode = (hashCode &* 31) &+ shoulderModeScale.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Pokemon.CameraAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Pokemon.CameraAttributes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Settings.Master.Pokemon.CameraAttributes = Pogoprotos.Settings.Master.Pokemon.CameraAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var diskRadiusM:Float {
           get {
                return builderResult.diskRadiusM
           }
           set (value) {
               builderResult.hasDiskRadiusM = true
               builderResult.diskRadiusM = value
           }
      }
      public var hasDiskRadiusM:Bool {
           get {
                return builderResult.hasDiskRadiusM
           }
      }
      @discardableResult
      public func setDiskRadiusM(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        self.diskRadiusM = value
        return self
      }
      @discardableResult
      public func clearDiskRadiusM() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder{
           builderResult.hasDiskRadiusM = false
           builderResult.diskRadiusM = Float(0)
           return self
      }
      public var cylinderRadiusM:Float {
           get {
                return builderResult.cylinderRadiusM
           }
           set (value) {
               builderResult.hasCylinderRadiusM = true
               builderResult.cylinderRadiusM = value
           }
      }
      public var hasCylinderRadiusM:Bool {
           get {
                return builderResult.hasCylinderRadiusM
           }
      }
      @discardableResult
      public func setCylinderRadiusM(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        self.cylinderRadiusM = value
        return self
      }
      @discardableResult
      public func clearCylinderRadiusM() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder{
           builderResult.hasCylinderRadiusM = false
           builderResult.cylinderRadiusM = Float(0)
           return self
      }
      public var cylinderHeightM:Float {
           get {
                return builderResult.cylinderHeightM
           }
           set (value) {
               builderResult.hasCylinderHeightM = true
               builderResult.cylinderHeightM = value
           }
      }
      public var hasCylinderHeightM:Bool {
           get {
                return builderResult.hasCylinderHeightM
           }
      }
      @discardableResult
      public func setCylinderHeightM(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        self.cylinderHeightM = value
        return self
      }
      @discardableResult
      public func clearCylinderHeightM() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder{
           builderResult.hasCylinderHeightM = false
           builderResult.cylinderHeightM = Float(0)
           return self
      }
      public var cylinderGroundM:Float {
           get {
                return builderResult.cylinderGroundM
           }
           set (value) {
               builderResult.hasCylinderGroundM = true
               builderResult.cylinderGroundM = value
           }
      }
      public var hasCylinderGroundM:Bool {
           get {
                return builderResult.hasCylinderGroundM
           }
      }
      @discardableResult
      public func setCylinderGroundM(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        self.cylinderGroundM = value
        return self
      }
      @discardableResult
      public func clearCylinderGroundM() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder{
           builderResult.hasCylinderGroundM = false
           builderResult.cylinderGroundM = Float(0)
           return self
      }
      public var shoulderModeScale:Float {
           get {
                return builderResult.shoulderModeScale
           }
           set (value) {
               builderResult.hasShoulderModeScale = true
               builderResult.shoulderModeScale = value
           }
      }
      public var hasShoulderModeScale:Bool {
           get {
                return builderResult.hasShoulderModeScale
           }
      }
      @discardableResult
      public func setShoulderModeScale(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        self.shoulderModeScale = value
        return self
      }
      @discardableResult
      public func clearShoulderModeScale() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder{
           builderResult.hasShoulderModeScale = false
           builderResult.shoulderModeScale = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Pokemon.CameraAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
        let returnMe:Pogoprotos.Settings.Master.Pokemon.CameraAttributes = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Settings.Master.Pokemon.CameraAttributes) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Pokemon.CameraAttributes() {
         return self
        }
        if other.hasDiskRadiusM {
             diskRadiusM = other.diskRadiusM
        }
        if other.hasCylinderRadiusM {
             cylinderRadiusM = other.cylinderRadiusM
        }
        if other.hasCylinderHeightM {
             cylinderHeightM = other.cylinderHeightM
        }
        if other.hasCylinderGroundM {
             cylinderGroundM = other.cylinderGroundM
        }
        if other.hasShoulderModeScale {
             shoulderModeScale = other.shoulderModeScale
        }
        try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 13:
            diskRadiusM = try codedInputStream.readFloat()

          case 21:
            cylinderRadiusM = try codedInputStream.readFloat()

          case 29:
            cylinderHeightM = try codedInputStream.readFloat()

          case 37:
            cylinderGroundM = try codedInputStream.readFloat()

          case 45:
            shoulderModeScale = try codedInputStream.readFloat()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder()
        if let jsonValueDiskRadiusM = jsonMap["diskRadiusM"] as? Float {
          resultDecodedBuilder.diskRadiusM = Float(jsonValueDiskRadiusM)
        } else if let jsonValueDiskRadiusM = jsonMap["diskRadiusM"] as? String {
          resultDecodedBuilder.diskRadiusM = Float(jsonValueDiskRadiusM)!
        }
        if let jsonValueCylinderRadiusM = jsonMap["cylinderRadiusM"] as? Float {
          resultDecodedBuilder.cylinderRadiusM = Float(jsonValueCylinderRadiusM)
        } else if let jsonValueCylinderRadiusM = jsonMap["cylinderRadiusM"] as? String {
          resultDecodedBuilder.cylinderRadiusM = Float(jsonValueCylinderRadiusM)!
        }
        if let jsonValueCylinderHeightM = jsonMap["cylinderHeightM"] as? Float {
          resultDecodedBuilder.cylinderHeightM = Float(jsonValueCylinderHeightM)
        } else if let jsonValueCylinderHeightM = jsonMap["cylinderHeightM"] as? String {
          resultDecodedBuilder.cylinderHeightM = Float(jsonValueCylinderHeightM)!
        }
        if let jsonValueCylinderGroundM = jsonMap["cylinderGroundM"] as? Float {
          resultDecodedBuilder.cylinderGroundM = Float(jsonValueCylinderGroundM)
        } else if let jsonValueCylinderGroundM = jsonMap["cylinderGroundM"] as? String {
          resultDecodedBuilder.cylinderGroundM = Float(jsonValueCylinderGroundM)!
        }
        if let jsonValueShoulderModeScale = jsonMap["shoulderModeScale"] as? Float {
          resultDecodedBuilder.shoulderModeScale = Float(jsonValueShoulderModeScale)
        } else if let jsonValueShoulderModeScale = jsonMap["shoulderModeScale"] as? String {
          resultDecodedBuilder.shoulderModeScale = Float(jsonValueShoulderModeScale)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class EncounterAttributes : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Settings.Master.Pokemon.EncounterAttributes, rhs: Pogoprotos.Settings.Master.Pokemon.EncounterAttributes) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasBaseCaptureRate == rhs.hasBaseCaptureRate) && (!lhs.hasBaseCaptureRate || lhs.baseCaptureRate == rhs.baseCaptureRate)
      fieldCheck = fieldCheck && (lhs.hasBaseFleeRate == rhs.hasBaseFleeRate) && (!lhs.hasBaseFleeRate || lhs.baseFleeRate == rhs.baseFleeRate)
      fieldCheck = fieldCheck && (lhs.hasCollisionRadiusM == rhs.hasCollisionRadiusM) && (!lhs.hasCollisionRadiusM || lhs.collisionRadiusM == rhs.collisionRadiusM)
      fieldCheck = fieldCheck && (lhs.hasCollisionHeightM == rhs.hasCollisionHeightM) && (!lhs.hasCollisionHeightM || lhs.collisionHeightM == rhs.collisionHeightM)
      fieldCheck = fieldCheck && (lhs.hasCollisionHeadRadiusM == rhs.hasCollisionHeadRadiusM) && (!lhs.hasCollisionHeadRadiusM || lhs.collisionHeadRadiusM == rhs.collisionHeadRadiusM)
      fieldCheck = fieldCheck && (lhs.hasMovementType == rhs.hasMovementType) && (!lhs.hasMovementType || lhs.movementType == rhs.movementType)
      fieldCheck = fieldCheck && (lhs.hasMovementTimerS == rhs.hasMovementTimerS) && (!lhs.hasMovementTimerS || lhs.movementTimerS == rhs.movementTimerS)
      fieldCheck = fieldCheck && (lhs.hasJumpTimeS == rhs.hasJumpTimeS) && (!lhs.hasJumpTimeS || lhs.jumpTimeS == rhs.jumpTimeS)
      fieldCheck = fieldCheck && (lhs.hasAttackTimerS == rhs.hasAttackTimerS) && (!lhs.hasAttackTimerS || lhs.attackTimerS == rhs.attackTimerS)
      fieldCheck = fieldCheck && (lhs.hasBonusCandyCaptureReward == rhs.hasBonusCandyCaptureReward) && (!lhs.hasBonusCandyCaptureReward || lhs.bonusCandyCaptureReward == rhs.bonusCandyCaptureReward)
      fieldCheck = fieldCheck && (lhs.hasBonusStardustCaptureReward == rhs.hasBonusStardustCaptureReward) && (!lhs.hasBonusStardustCaptureReward || lhs.bonusStardustCaptureReward == rhs.bonusStardustCaptureReward)
      fieldCheck = fieldCheck && (lhs.hasAttackProbability == rhs.hasAttackProbability) && (!lhs.hasAttackProbability || lhs.attackProbability == rhs.attackProbability)
      fieldCheck = fieldCheck && (lhs.hasDodgeProbability == rhs.hasDodgeProbability) && (!lhs.hasDodgeProbability || lhs.dodgeProbability == rhs.dodgeProbability)
      fieldCheck = fieldCheck && (lhs.hasDodgeDurationS == rhs.hasDodgeDurationS) && (!lhs.hasDodgeDurationS || lhs.dodgeDurationS == rhs.dodgeDurationS)
      fieldCheck = fieldCheck && (lhs.hasDodgeDistance == rhs.hasDodgeDistance) && (!lhs.hasDodgeDistance || lhs.dodgeDistance == rhs.dodgeDistance)
      fieldCheck = fieldCheck && (lhs.hasCameraDistance == rhs.hasCameraDistance) && (!lhs.hasCameraDistance || lhs.cameraDistance == rhs.cameraDistance)
      fieldCheck = fieldCheck && (lhs.hasMinPokemonActionFrequencyS == rhs.hasMinPokemonActionFrequencyS) && (!lhs.hasMinPokemonActionFrequencyS || lhs.minPokemonActionFrequencyS == rhs.minPokemonActionFrequencyS)
      fieldCheck = fieldCheck && (lhs.hasMaxPokemonActionFrequencyS == rhs.hasMaxPokemonActionFrequencyS) && (!lhs.hasMaxPokemonActionFrequencyS || lhs.maxPokemonActionFrequencyS == rhs.maxPokemonActionFrequencyS)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var baseCaptureRate:Float = Float(0)
    public fileprivate(set) var hasBaseCaptureRate:Bool = false

    public fileprivate(set) var baseFleeRate:Float = Float(0)
    public fileprivate(set) var hasBaseFleeRate:Bool = false

    public fileprivate(set) var collisionRadiusM:Float = Float(0)
    public fileprivate(set) var hasCollisionRadiusM:Bool = false

    public fileprivate(set) var collisionHeightM:Float = Float(0)
    public fileprivate(set) var hasCollisionHeightM:Bool = false

    public fileprivate(set) var collisionHeadRadiusM:Float = Float(0)
    public fileprivate(set) var hasCollisionHeadRadiusM:Bool = false

    public fileprivate(set) var movementType:Pogoprotos.Enums.PokemonMovementType = Pogoprotos.Enums.PokemonMovementType.movementStatic
    public fileprivate(set) var hasMovementType:Bool = false
    public fileprivate(set) var movementTimerS:Float = Float(0)
    public fileprivate(set) var hasMovementTimerS:Bool = false

    public fileprivate(set) var jumpTimeS:Float = Float(0)
    public fileprivate(set) var hasJumpTimeS:Bool = false

    public fileprivate(set) var attackTimerS:Float = Float(0)
    public fileprivate(set) var hasAttackTimerS:Bool = false

    public fileprivate(set) var bonusCandyCaptureReward:Int32 = Int32(0)
    public fileprivate(set) var hasBonusCandyCaptureReward:Bool = false

    public fileprivate(set) var bonusStardustCaptureReward:Int32 = Int32(0)
    public fileprivate(set) var hasBonusStardustCaptureReward:Bool = false

    public fileprivate(set) var attackProbability:Float = Float(0)
    public fileprivate(set) var hasAttackProbability:Bool = false

    public fileprivate(set) var dodgeProbability:Float = Float(0)
    public fileprivate(set) var hasDodgeProbability:Bool = false

    public fileprivate(set) var dodgeDurationS:Float = Float(0)
    public fileprivate(set) var hasDodgeDurationS:Bool = false

    public fileprivate(set) var dodgeDistance:Float = Float(0)
    public fileprivate(set) var hasDodgeDistance:Bool = false

    public fileprivate(set) var cameraDistance:Float = Float(0)
    public fileprivate(set) var hasCameraDistance:Bool = false

    public fileprivate(set) var minPokemonActionFrequencyS:Float = Float(0)
    public fileprivate(set) var hasMinPokemonActionFrequencyS:Bool = false

    public fileprivate(set) var maxPokemonActionFrequencyS:Float = Float(0)
    public fileprivate(set) var hasMaxPokemonActionFrequencyS:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasBaseCaptureRate {
        try codedOutputStream.writeFloat(fieldNumber: 1, value:baseCaptureRate)
      }
      if hasBaseFleeRate {
        try codedOutputStream.writeFloat(fieldNumber: 2, value:baseFleeRate)
      }
      if hasCollisionRadiusM {
        try codedOutputStream.writeFloat(fieldNumber: 3, value:collisionRadiusM)
      }
      if hasCollisionHeightM {
        try codedOutputStream.writeFloat(fieldNumber: 4, value:collisionHeightM)
      }
      if hasCollisionHeadRadiusM {
        try codedOutputStream.writeFloat(fieldNumber: 5, value:collisionHeadRadiusM)
      }
      if hasMovementType {
        try codedOutputStream.writeEnum(fieldNumber: 6, value:movementType.rawValue)
      }
      if hasMovementTimerS {
        try codedOutputStream.writeFloat(fieldNumber: 7, value:movementTimerS)
      }
      if hasJumpTimeS {
        try codedOutputStream.writeFloat(fieldNumber: 8, value:jumpTimeS)
      }
      if hasAttackTimerS {
        try codedOutputStream.writeFloat(fieldNumber: 9, value:attackTimerS)
      }
      if hasBonusCandyCaptureReward {
        try codedOutputStream.writeInt32(fieldNumber: 10, value:bonusCandyCaptureReward)
      }
      if hasBonusStardustCaptureReward {
        try codedOutputStream.writeInt32(fieldNumber: 11, value:bonusStardustCaptureReward)
      }
      if hasAttackProbability {
        try codedOutputStream.writeFloat(fieldNumber: 12, value:attackProbability)
      }
      if hasDodgeProbability {
        try codedOutputStream.writeFloat(fieldNumber: 13, value:dodgeProbability)
      }
      if hasDodgeDurationS {
        try codedOutputStream.writeFloat(fieldNumber: 14, value:dodgeDurationS)
      }
      if hasDodgeDistance {
        try codedOutputStream.writeFloat(fieldNumber: 15, value:dodgeDistance)
      }
      if hasCameraDistance {
        try codedOutputStream.writeFloat(fieldNumber: 16, value:cameraDistance)
      }
      if hasMinPokemonActionFrequencyS {
        try codedOutputStream.writeFloat(fieldNumber: 17, value:minPokemonActionFrequencyS)
      }
      if hasMaxPokemonActionFrequencyS {
        try codedOutputStream.writeFloat(fieldNumber: 18, value:maxPokemonActionFrequencyS)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasBaseCaptureRate {
        serialize_size += baseCaptureRate.computeFloatSize(fieldNumber: 1)
      }
      if hasBaseFleeRate {
        serialize_size += baseFleeRate.computeFloatSize(fieldNumber: 2)
      }
      if hasCollisionRadiusM {
        serialize_size += collisionRadiusM.computeFloatSize(fieldNumber: 3)
      }
      if hasCollisionHeightM {
        serialize_size += collisionHeightM.computeFloatSize(fieldNumber: 4)
      }
      if hasCollisionHeadRadiusM {
        serialize_size += collisionHeadRadiusM.computeFloatSize(fieldNumber: 5)
      }
      if (hasMovementType) {
        serialize_size += movementType.rawValue.computeEnumSize(fieldNumber: 6)
      }
      if hasMovementTimerS {
        serialize_size += movementTimerS.computeFloatSize(fieldNumber: 7)
      }
      if hasJumpTimeS {
        serialize_size += jumpTimeS.computeFloatSize(fieldNumber: 8)
      }
      if hasAttackTimerS {
        serialize_size += attackTimerS.computeFloatSize(fieldNumber: 9)
      }
      if hasBonusCandyCaptureReward {
        serialize_size += bonusCandyCaptureReward.computeInt32Size(fieldNumber: 10)
      }
      if hasBonusStardustCaptureReward {
        serialize_size += bonusStardustCaptureReward.computeInt32Size(fieldNumber: 11)
      }
      if hasAttackProbability {
        serialize_size += attackProbability.computeFloatSize(fieldNumber: 12)
      }
      if hasDodgeProbability {
        serialize_size += dodgeProbability.computeFloatSize(fieldNumber: 13)
      }
      if hasDodgeDurationS {
        serialize_size += dodgeDurationS.computeFloatSize(fieldNumber: 14)
      }
      if hasDodgeDistance {
        serialize_size += dodgeDistance.computeFloatSize(fieldNumber: 15)
      }
      if hasCameraDistance {
        serialize_size += cameraDistance.computeFloatSize(fieldNumber: 16)
      }
      if hasMinPokemonActionFrequencyS {
        serialize_size += minPokemonActionFrequencyS.computeFloatSize(fieldNumber: 17)
      }
      if hasMaxPokemonActionFrequencyS {
        serialize_size += maxPokemonActionFrequencyS.computeFloatSize(fieldNumber: 18)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
      return Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.classBuilder() as! Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
      return try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes) throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
      return try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasBaseCaptureRate {
        jsonMap["baseCaptureRate"] = Float(baseCaptureRate)
      }
      if hasBaseFleeRate {
        jsonMap["baseFleeRate"] = Float(baseFleeRate)
      }
      if hasCollisionRadiusM {
        jsonMap["collisionRadiusM"] = Float(collisionRadiusM)
      }
      if hasCollisionHeightM {
        jsonMap["collisionHeightM"] = Float(collisionHeightM)
      }
      if hasCollisionHeadRadiusM {
        jsonMap["collisionHeadRadiusM"] = Float(collisionHeadRadiusM)
      }
      if hasMovementType {
        jsonMap["movementType"] = movementType.toString()
      }
      if hasMovementTimerS {
        jsonMap["movementTimerS"] = Float(movementTimerS)
      }
      if hasJumpTimeS {
        jsonMap["jumpTimeS"] = Float(jumpTimeS)
      }
      if hasAttackTimerS {
        jsonMap["attackTimerS"] = Float(attackTimerS)
      }
      if hasBonusCandyCaptureReward {
        jsonMap["bonusCandyCaptureReward"] = Int(bonusCandyCaptureReward)
      }
      if hasBonusStardustCaptureReward {
        jsonMap["bonusStardustCaptureReward"] = Int(bonusStardustCaptureReward)
      }
      if hasAttackProbability {
        jsonMap["attackProbability"] = Float(attackProbability)
      }
      if hasDodgeProbability {
        jsonMap["dodgeProbability"] = Float(dodgeProbability)
      }
      if hasDodgeDurationS {
        jsonMap["dodgeDurationS"] = Float(dodgeDurationS)
      }
      if hasDodgeDistance {
        jsonMap["dodgeDistance"] = Float(dodgeDistance)
      }
      if hasCameraDistance {
        jsonMap["cameraDistance"] = Float(cameraDistance)
      }
      if hasMinPokemonActionFrequencyS {
        jsonMap["minPokemonActionFrequencyS"] = Float(minPokemonActionFrequencyS)
      }
      if hasMaxPokemonActionFrequencyS {
        jsonMap["maxPokemonActionFrequencyS"] = Float(maxPokemonActionFrequencyS)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes {
      return try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes {
      return try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasBaseCaptureRate {
        output += "\(indent) baseCaptureRate: \(baseCaptureRate) \n"
      }
      if hasBaseFleeRate {
        output += "\(indent) baseFleeRate: \(baseFleeRate) \n"
      }
      if hasCollisionRadiusM {
        output += "\(indent) collisionRadiusM: \(collisionRadiusM) \n"
      }
      if hasCollisionHeightM {
        output += "\(indent) collisionHeightM: \(collisionHeightM) \n"
      }
      if hasCollisionHeadRadiusM {
        output += "\(indent) collisionHeadRadiusM: \(collisionHeadRadiusM) \n"
      }
      if (hasMovementType) {
        output += "\(indent) movementType: \(movementType.description)\n"
      }
      if hasMovementTimerS {
        output += "\(indent) movementTimerS: \(movementTimerS) \n"
      }
      if hasJumpTimeS {
        output += "\(indent) jumpTimeS: \(jumpTimeS) \n"
      }
      if hasAttackTimerS {
        output += "\(indent) attackTimerS: \(attackTimerS) \n"
      }
      if hasBonusCandyCaptureReward {
        output += "\(indent) bonusCandyCaptureReward: \(bonusCandyCaptureReward) \n"
      }
      if hasBonusStardustCaptureReward {
        output += "\(indent) bonusStardustCaptureReward: \(bonusStardustCaptureReward) \n"
      }
      if hasAttackProbability {
        output += "\(indent) attackProbability: \(attackProbability) \n"
      }
      if hasDodgeProbability {
        output += "\(indent) dodgeProbability: \(dodgeProbability) \n"
      }
      if hasDodgeDurationS {
        output += "\(indent) dodgeDurationS: \(dodgeDurationS) \n"
      }
      if hasDodgeDistance {
        output += "\(indent) dodgeDistance: \(dodgeDistance) \n"
      }
      if hasCameraDistance {
        output += "\(indent) cameraDistance: \(cameraDistance) \n"
      }
      if hasMinPokemonActionFrequencyS {
        output += "\(indent) minPokemonActionFrequencyS: \(minPokemonActionFrequencyS) \n"
      }
      if hasMaxPokemonActionFrequencyS {
        output += "\(indent) maxPokemonActionFrequencyS: \(maxPokemonActionFrequencyS) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasBaseCaptureRate {
               hashCode = (hashCode &* 31) &+ baseCaptureRate.hashValue
            }
            if hasBaseFleeRate {
               hashCode = (hashCode &* 31) &+ baseFleeRate.hashValue
            }
            if hasCollisionRadiusM {
               hashCode = (hashCode &* 31) &+ collisionRadiusM.hashValue
            }
            if hasCollisionHeightM {
               hashCode = (hashCode &* 31) &+ collisionHeightM.hashValue
            }
            if hasCollisionHeadRadiusM {
               hashCode = (hashCode &* 31) &+ collisionHeadRadiusM.hashValue
            }
            if hasMovementType {
               hashCode = (hashCode &* 31) &+ Int(movementType.rawValue)
            }
            if hasMovementTimerS {
               hashCode = (hashCode &* 31) &+ movementTimerS.hashValue
            }
            if hasJumpTimeS {
               hashCode = (hashCode &* 31) &+ jumpTimeS.hashValue
            }
            if hasAttackTimerS {
               hashCode = (hashCode &* 31) &+ attackTimerS.hashValue
            }
            if hasBonusCandyCaptureReward {
               hashCode = (hashCode &* 31) &+ bonusCandyCaptureReward.hashValue
            }
            if hasBonusStardustCaptureReward {
               hashCode = (hashCode &* 31) &+ bonusStardustCaptureReward.hashValue
            }
            if hasAttackProbability {
               hashCode = (hashCode &* 31) &+ attackProbability.hashValue
            }
            if hasDodgeProbability {
               hashCode = (hashCode &* 31) &+ dodgeProbability.hashValue
            }
            if hasDodgeDurationS {
               hashCode = (hashCode &* 31) &+ dodgeDurationS.hashValue
            }
            if hasDodgeDistance {
               hashCode = (hashCode &* 31) &+ dodgeDistance.hashValue
            }
            if hasCameraDistance {
               hashCode = (hashCode &* 31) &+ cameraDistance.hashValue
            }
            if hasMinPokemonActionFrequencyS {
               hashCode = (hashCode &* 31) &+ minPokemonActionFrequencyS.hashValue
            }
            if hasMaxPokemonActionFrequencyS {
               hashCode = (hashCode &* 31) &+ maxPokemonActionFrequencyS.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Pokemon.EncounterAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Pokemon.EncounterAttributes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes = Pogoprotos.Settings.Master.Pokemon.EncounterAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var baseCaptureRate:Float {
           get {
                return builderResult.baseCaptureRate
           }
           set (value) {
               builderResult.hasBaseCaptureRate = true
               builderResult.baseCaptureRate = value
           }
      }
      public var hasBaseCaptureRate:Bool {
           get {
                return builderResult.hasBaseCaptureRate
           }
      }
      @discardableResult
      public func setBaseCaptureRate(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.baseCaptureRate = value
        return self
      }
      @discardableResult
      public func clearBaseCaptureRate() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasBaseCaptureRate = false
           builderResult.baseCaptureRate = Float(0)
           return self
      }
      public var baseFleeRate:Float {
           get {
                return builderResult.baseFleeRate
           }
           set (value) {
               builderResult.hasBaseFleeRate = true
               builderResult.baseFleeRate = value
           }
      }
      public var hasBaseFleeRate:Bool {
           get {
                return builderResult.hasBaseFleeRate
           }
      }
      @discardableResult
      public func setBaseFleeRate(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.baseFleeRate = value
        return self
      }
      @discardableResult
      public func clearBaseFleeRate() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasBaseFleeRate = false
           builderResult.baseFleeRate = Float(0)
           return self
      }
      public var collisionRadiusM:Float {
           get {
                return builderResult.collisionRadiusM
           }
           set (value) {
               builderResult.hasCollisionRadiusM = true
               builderResult.collisionRadiusM = value
           }
      }
      public var hasCollisionRadiusM:Bool {
           get {
                return builderResult.hasCollisionRadiusM
           }
      }
      @discardableResult
      public func setCollisionRadiusM(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.collisionRadiusM = value
        return self
      }
      @discardableResult
      public func clearCollisionRadiusM() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasCollisionRadiusM = false
           builderResult.collisionRadiusM = Float(0)
           return self
      }
      public var collisionHeightM:Float {
           get {
                return builderResult.collisionHeightM
           }
           set (value) {
               builderResult.hasCollisionHeightM = true
               builderResult.collisionHeightM = value
           }
      }
      public var hasCollisionHeightM:Bool {
           get {
                return builderResult.hasCollisionHeightM
           }
      }
      @discardableResult
      public func setCollisionHeightM(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.collisionHeightM = value
        return self
      }
      @discardableResult
      public func clearCollisionHeightM() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasCollisionHeightM = false
           builderResult.collisionHeightM = Float(0)
           return self
      }
      public var collisionHeadRadiusM:Float {
           get {
                return builderResult.collisionHeadRadiusM
           }
           set (value) {
               builderResult.hasCollisionHeadRadiusM = true
               builderResult.collisionHeadRadiusM = value
           }
      }
      public var hasCollisionHeadRadiusM:Bool {
           get {
                return builderResult.hasCollisionHeadRadiusM
           }
      }
      @discardableResult
      public func setCollisionHeadRadiusM(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.collisionHeadRadiusM = value
        return self
      }
      @discardableResult
      public func clearCollisionHeadRadiusM() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasCollisionHeadRadiusM = false
           builderResult.collisionHeadRadiusM = Float(0)
           return self
      }
        public var movementType:Pogoprotos.Enums.PokemonMovementType {
            get {
                return builderResult.movementType
            }
            set (value) {
                builderResult.hasMovementType = true
                builderResult.movementType = value
            }
        }
        public var hasMovementType:Bool{
            get {
                return builderResult.hasMovementType
            }
        }
      @discardableResult
        public func setMovementType(_ value:Pogoprotos.Enums.PokemonMovementType) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
          self.movementType = value
          return self
        }
      @discardableResult
        public func clearMovementType() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
           builderResult.hasMovementType = false
           builderResult.movementType = .movementStatic
           return self
        }
      public var movementTimerS:Float {
           get {
                return builderResult.movementTimerS
           }
           set (value) {
               builderResult.hasMovementTimerS = true
               builderResult.movementTimerS = value
           }
      }
      public var hasMovementTimerS:Bool {
           get {
                return builderResult.hasMovementTimerS
           }
      }
      @discardableResult
      public func setMovementTimerS(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.movementTimerS = value
        return self
      }
      @discardableResult
      public func clearMovementTimerS() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasMovementTimerS = false
           builderResult.movementTimerS = Float(0)
           return self
      }
      public var jumpTimeS:Float {
           get {
                return builderResult.jumpTimeS
           }
           set (value) {
               builderResult.hasJumpTimeS = true
               builderResult.jumpTimeS = value
           }
      }
      public var hasJumpTimeS:Bool {
           get {
                return builderResult.hasJumpTimeS
           }
      }
      @discardableResult
      public func setJumpTimeS(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.jumpTimeS = value
        return self
      }
      @discardableResult
      public func clearJumpTimeS() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasJumpTimeS = false
           builderResult.jumpTimeS = Float(0)
           return self
      }
      public var attackTimerS:Float {
           get {
                return builderResult.attackTimerS
           }
           set (value) {
               builderResult.hasAttackTimerS = true
               builderResult.attackTimerS = value
           }
      }
      public var hasAttackTimerS:Bool {
           get {
                return builderResult.hasAttackTimerS
           }
      }
      @discardableResult
      public func setAttackTimerS(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.attackTimerS = value
        return self
      }
      @discardableResult
      public func clearAttackTimerS() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasAttackTimerS = false
           builderResult.attackTimerS = Float(0)
           return self
      }
      public var bonusCandyCaptureReward:Int32 {
           get {
                return builderResult.bonusCandyCaptureReward
           }
           set (value) {
               builderResult.hasBonusCandyCaptureReward = true
               builderResult.bonusCandyCaptureReward = value
           }
      }
      public var hasBonusCandyCaptureReward:Bool {
           get {
                return builderResult.hasBonusCandyCaptureReward
           }
      }
      @discardableResult
      public func setBonusCandyCaptureReward(_ value:Int32) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.bonusCandyCaptureReward = value
        return self
      }
      @discardableResult
      public func clearBonusCandyCaptureReward() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasBonusCandyCaptureReward = false
           builderResult.bonusCandyCaptureReward = Int32(0)
           return self
      }
      public var bonusStardustCaptureReward:Int32 {
           get {
                return builderResult.bonusStardustCaptureReward
           }
           set (value) {
               builderResult.hasBonusStardustCaptureReward = true
               builderResult.bonusStardustCaptureReward = value
           }
      }
      public var hasBonusStardustCaptureReward:Bool {
           get {
                return builderResult.hasBonusStardustCaptureReward
           }
      }
      @discardableResult
      public func setBonusStardustCaptureReward(_ value:Int32) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.bonusStardustCaptureReward = value
        return self
      }
      @discardableResult
      public func clearBonusStardustCaptureReward() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasBonusStardustCaptureReward = false
           builderResult.bonusStardustCaptureReward = Int32(0)
           return self
      }
      public var attackProbability:Float {
           get {
                return builderResult.attackProbability
           }
           set (value) {
               builderResult.hasAttackProbability = true
               builderResult.attackProbability = value
           }
      }
      public var hasAttackProbability:Bool {
           get {
                return builderResult.hasAttackProbability
           }
      }
      @discardableResult
      public func setAttackProbability(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.attackProbability = value
        return self
      }
      @discardableResult
      public func clearAttackProbability() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasAttackProbability = false
           builderResult.attackProbability = Float(0)
           return self
      }
      public var dodgeProbability:Float {
           get {
                return builderResult.dodgeProbability
           }
           set (value) {
               builderResult.hasDodgeProbability = true
               builderResult.dodgeProbability = value
           }
      }
      public var hasDodgeProbability:Bool {
           get {
                return builderResult.hasDodgeProbability
           }
      }
      @discardableResult
      public func setDodgeProbability(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.dodgeProbability = value
        return self
      }
      @discardableResult
      public func clearDodgeProbability() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasDodgeProbability = false
           builderResult.dodgeProbability = Float(0)
           return self
      }
      public var dodgeDurationS:Float {
           get {
                return builderResult.dodgeDurationS
           }
           set (value) {
               builderResult.hasDodgeDurationS = true
               builderResult.dodgeDurationS = value
           }
      }
      public var hasDodgeDurationS:Bool {
           get {
                return builderResult.hasDodgeDurationS
           }
      }
      @discardableResult
      public func setDodgeDurationS(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.dodgeDurationS = value
        return self
      }
      @discardableResult
      public func clearDodgeDurationS() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasDodgeDurationS = false
           builderResult.dodgeDurationS = Float(0)
           return self
      }
      public var dodgeDistance:Float {
           get {
                return builderResult.dodgeDistance
           }
           set (value) {
               builderResult.hasDodgeDistance = true
               builderResult.dodgeDistance = value
           }
      }
      public var hasDodgeDistance:Bool {
           get {
                return builderResult.hasDodgeDistance
           }
      }
      @discardableResult
      public func setDodgeDistance(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.dodgeDistance = value
        return self
      }
      @discardableResult
      public func clearDodgeDistance() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasDodgeDistance = false
           builderResult.dodgeDistance = Float(0)
           return self
      }
      public var cameraDistance:Float {
           get {
                return builderResult.cameraDistance
           }
           set (value) {
               builderResult.hasCameraDistance = true
               builderResult.cameraDistance = value
           }
      }
      public var hasCameraDistance:Bool {
           get {
                return builderResult.hasCameraDistance
           }
      }
      @discardableResult
      public func setCameraDistance(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.cameraDistance = value
        return self
      }
      @discardableResult
      public func clearCameraDistance() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasCameraDistance = false
           builderResult.cameraDistance = Float(0)
           return self
      }
      public var minPokemonActionFrequencyS:Float {
           get {
                return builderResult.minPokemonActionFrequencyS
           }
           set (value) {
               builderResult.hasMinPokemonActionFrequencyS = true
               builderResult.minPokemonActionFrequencyS = value
           }
      }
      public var hasMinPokemonActionFrequencyS:Bool {
           get {
                return builderResult.hasMinPokemonActionFrequencyS
           }
      }
      @discardableResult
      public func setMinPokemonActionFrequencyS(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.minPokemonActionFrequencyS = value
        return self
      }
      @discardableResult
      public func clearMinPokemonActionFrequencyS() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasMinPokemonActionFrequencyS = false
           builderResult.minPokemonActionFrequencyS = Float(0)
           return self
      }
      public var maxPokemonActionFrequencyS:Float {
           get {
                return builderResult.maxPokemonActionFrequencyS
           }
           set (value) {
               builderResult.hasMaxPokemonActionFrequencyS = true
               builderResult.maxPokemonActionFrequencyS = value
           }
      }
      public var hasMaxPokemonActionFrequencyS:Bool {
           get {
                return builderResult.hasMaxPokemonActionFrequencyS
           }
      }
      @discardableResult
      public func setMaxPokemonActionFrequencyS(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        self.maxPokemonActionFrequencyS = value
        return self
      }
      @discardableResult
      public func clearMaxPokemonActionFrequencyS() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder{
           builderResult.hasMaxPokemonActionFrequencyS = false
           builderResult.maxPokemonActionFrequencyS = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Pokemon.EncounterAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        return try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes {
        let returnMe:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes) throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Pokemon.EncounterAttributes() {
         return self
        }
        if other.hasBaseCaptureRate {
             baseCaptureRate = other.baseCaptureRate
        }
        if other.hasBaseFleeRate {
             baseFleeRate = other.baseFleeRate
        }
        if other.hasCollisionRadiusM {
             collisionRadiusM = other.collisionRadiusM
        }
        if other.hasCollisionHeightM {
             collisionHeightM = other.collisionHeightM
        }
        if other.hasCollisionHeadRadiusM {
             collisionHeadRadiusM = other.collisionHeadRadiusM
        }
        if other.hasMovementType {
             movementType = other.movementType
        }
        if other.hasMovementTimerS {
             movementTimerS = other.movementTimerS
        }
        if other.hasJumpTimeS {
             jumpTimeS = other.jumpTimeS
        }
        if other.hasAttackTimerS {
             attackTimerS = other.attackTimerS
        }
        if other.hasBonusCandyCaptureReward {
             bonusCandyCaptureReward = other.bonusCandyCaptureReward
        }
        if other.hasBonusStardustCaptureReward {
             bonusStardustCaptureReward = other.bonusStardustCaptureReward
        }
        if other.hasAttackProbability {
             attackProbability = other.attackProbability
        }
        if other.hasDodgeProbability {
             dodgeProbability = other.dodgeProbability
        }
        if other.hasDodgeDurationS {
             dodgeDurationS = other.dodgeDurationS
        }
        if other.hasDodgeDistance {
             dodgeDistance = other.dodgeDistance
        }
        if other.hasCameraDistance {
             cameraDistance = other.cameraDistance
        }
        if other.hasMinPokemonActionFrequencyS {
             minPokemonActionFrequencyS = other.minPokemonActionFrequencyS
        }
        if other.hasMaxPokemonActionFrequencyS {
             maxPokemonActionFrequencyS = other.maxPokemonActionFrequencyS
        }
        try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 13:
            baseCaptureRate = try codedInputStream.readFloat()

          case 21:
            baseFleeRate = try codedInputStream.readFloat()

          case 29:
            collisionRadiusM = try codedInputStream.readFloat()

          case 37:
            collisionHeightM = try codedInputStream.readFloat()

          case 45:
            collisionHeadRadiusM = try codedInputStream.readFloat()

          case 48:
            let valueIntmovementType = try codedInputStream.readEnum()
            if let enumsmovementType = Pogoprotos.Enums.PokemonMovementType(rawValue:valueIntmovementType){
                 movementType = enumsmovementType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(fieldNumber: 6, value:Int64(valueIntmovementType))
            }

          case 61:
            movementTimerS = try codedInputStream.readFloat()

          case 69:
            jumpTimeS = try codedInputStream.readFloat()

          case 77:
            attackTimerS = try codedInputStream.readFloat()

          case 80:
            bonusCandyCaptureReward = try codedInputStream.readInt32()

          case 88:
            bonusStardustCaptureReward = try codedInputStream.readInt32()

          case 101:
            attackProbability = try codedInputStream.readFloat()

          case 109:
            dodgeProbability = try codedInputStream.readFloat()

          case 117:
            dodgeDurationS = try codedInputStream.readFloat()

          case 125:
            dodgeDistance = try codedInputStream.readFloat()

          case 133:
            cameraDistance = try codedInputStream.readFloat()

          case 141:
            minPokemonActionFrequencyS = try codedInputStream.readFloat()

          case 149:
            maxPokemonActionFrequencyS = try codedInputStream.readFloat()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder()
        if let jsonValueBaseCaptureRate = jsonMap["baseCaptureRate"] as? Float {
          resultDecodedBuilder.baseCaptureRate = Float(jsonValueBaseCaptureRate)
        } else if let jsonValueBaseCaptureRate = jsonMap["baseCaptureRate"] as? String {
          resultDecodedBuilder.baseCaptureRate = Float(jsonValueBaseCaptureRate)!
        }
        if let jsonValueBaseFleeRate = jsonMap["baseFleeRate"] as? Float {
          resultDecodedBuilder.baseFleeRate = Float(jsonValueBaseFleeRate)
        } else if let jsonValueBaseFleeRate = jsonMap["baseFleeRate"] as? String {
          resultDecodedBuilder.baseFleeRate = Float(jsonValueBaseFleeRate)!
        }
        if let jsonValueCollisionRadiusM = jsonMap["collisionRadiusM"] as? Float {
          resultDecodedBuilder.collisionRadiusM = Float(jsonValueCollisionRadiusM)
        } else if let jsonValueCollisionRadiusM = jsonMap["collisionRadiusM"] as? String {
          resultDecodedBuilder.collisionRadiusM = Float(jsonValueCollisionRadiusM)!
        }
        if let jsonValueCollisionHeightM = jsonMap["collisionHeightM"] as? Float {
          resultDecodedBuilder.collisionHeightM = Float(jsonValueCollisionHeightM)
        } else if let jsonValueCollisionHeightM = jsonMap["collisionHeightM"] as? String {
          resultDecodedBuilder.collisionHeightM = Float(jsonValueCollisionHeightM)!
        }
        if let jsonValueCollisionHeadRadiusM = jsonMap["collisionHeadRadiusM"] as? Float {
          resultDecodedBuilder.collisionHeadRadiusM = Float(jsonValueCollisionHeadRadiusM)
        } else if let jsonValueCollisionHeadRadiusM = jsonMap["collisionHeadRadiusM"] as? String {
          resultDecodedBuilder.collisionHeadRadiusM = Float(jsonValueCollisionHeadRadiusM)!
        }
        if let jsonValueMovementType = jsonMap["movementType"] as? String {
          resultDecodedBuilder.movementType = try Pogoprotos.Enums.PokemonMovementType.fromString(str: jsonValueMovementType)
        }
        if let jsonValueMovementTimerS = jsonMap["movementTimerS"] as? Float {
          resultDecodedBuilder.movementTimerS = Float(jsonValueMovementTimerS)
        } else if let jsonValueMovementTimerS = jsonMap["movementTimerS"] as? String {
          resultDecodedBuilder.movementTimerS = Float(jsonValueMovementTimerS)!
        }
        if let jsonValueJumpTimeS = jsonMap["jumpTimeS"] as? Float {
          resultDecodedBuilder.jumpTimeS = Float(jsonValueJumpTimeS)
        } else if let jsonValueJumpTimeS = jsonMap["jumpTimeS"] as? String {
          resultDecodedBuilder.jumpTimeS = Float(jsonValueJumpTimeS)!
        }
        if let jsonValueAttackTimerS = jsonMap["attackTimerS"] as? Float {
          resultDecodedBuilder.attackTimerS = Float(jsonValueAttackTimerS)
        } else if let jsonValueAttackTimerS = jsonMap["attackTimerS"] as? String {
          resultDecodedBuilder.attackTimerS = Float(jsonValueAttackTimerS)!
        }
        if let jsonValueBonusCandyCaptureReward = jsonMap["bonusCandyCaptureReward"] as? Int {
          resultDecodedBuilder.bonusCandyCaptureReward = Int32(jsonValueBonusCandyCaptureReward)
        } else if let jsonValueBonusCandyCaptureReward = jsonMap["bonusCandyCaptureReward"] as? String {
          resultDecodedBuilder.bonusCandyCaptureReward = Int32(jsonValueBonusCandyCaptureReward)!
        }
        if let jsonValueBonusStardustCaptureReward = jsonMap["bonusStardustCaptureReward"] as? Int {
          resultDecodedBuilder.bonusStardustCaptureReward = Int32(jsonValueBonusStardustCaptureReward)
        } else if let jsonValueBonusStardustCaptureReward = jsonMap["bonusStardustCaptureReward"] as? String {
          resultDecodedBuilder.bonusStardustCaptureReward = Int32(jsonValueBonusStardustCaptureReward)!
        }
        if let jsonValueAttackProbability = jsonMap["attackProbability"] as? Float {
          resultDecodedBuilder.attackProbability = Float(jsonValueAttackProbability)
        } else if let jsonValueAttackProbability = jsonMap["attackProbability"] as? String {
          resultDecodedBuilder.attackProbability = Float(jsonValueAttackProbability)!
        }
        if let jsonValueDodgeProbability = jsonMap["dodgeProbability"] as? Float {
          resultDecodedBuilder.dodgeProbability = Float(jsonValueDodgeProbability)
        } else if let jsonValueDodgeProbability = jsonMap["dodgeProbability"] as? String {
          resultDecodedBuilder.dodgeProbability = Float(jsonValueDodgeProbability)!
        }
        if let jsonValueDodgeDurationS = jsonMap["dodgeDurationS"] as? Float {
          resultDecodedBuilder.dodgeDurationS = Float(jsonValueDodgeDurationS)
        } else if let jsonValueDodgeDurationS = jsonMap["dodgeDurationS"] as? String {
          resultDecodedBuilder.dodgeDurationS = Float(jsonValueDodgeDurationS)!
        }
        if let jsonValueDodgeDistance = jsonMap["dodgeDistance"] as? Float {
          resultDecodedBuilder.dodgeDistance = Float(jsonValueDodgeDistance)
        } else if let jsonValueDodgeDistance = jsonMap["dodgeDistance"] as? String {
          resultDecodedBuilder.dodgeDistance = Float(jsonValueDodgeDistance)!
        }
        if let jsonValueCameraDistance = jsonMap["cameraDistance"] as? Float {
          resultDecodedBuilder.cameraDistance = Float(jsonValueCameraDistance)
        } else if let jsonValueCameraDistance = jsonMap["cameraDistance"] as? String {
          resultDecodedBuilder.cameraDistance = Float(jsonValueCameraDistance)!
        }
        if let jsonValueMinPokemonActionFrequencyS = jsonMap["minPokemonActionFrequencyS"] as? Float {
          resultDecodedBuilder.minPokemonActionFrequencyS = Float(jsonValueMinPokemonActionFrequencyS)
        } else if let jsonValueMinPokemonActionFrequencyS = jsonMap["minPokemonActionFrequencyS"] as? String {
          resultDecodedBuilder.minPokemonActionFrequencyS = Float(jsonValueMinPokemonActionFrequencyS)!
        }
        if let jsonValueMaxPokemonActionFrequencyS = jsonMap["maxPokemonActionFrequencyS"] as? Float {
          resultDecodedBuilder.maxPokemonActionFrequencyS = Float(jsonValueMaxPokemonActionFrequencyS)
        } else if let jsonValueMaxPokemonActionFrequencyS = jsonMap["maxPokemonActionFrequencyS"] as? String {
          resultDecodedBuilder.maxPokemonActionFrequencyS = Float(jsonValueMaxPokemonActionFrequencyS)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class EvolutionBranch : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Settings.Master.Pokemon.EvolutionBranch, rhs: Pogoprotos.Settings.Master.Pokemon.EvolutionBranch) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasEvolution == rhs.hasEvolution) && (!lhs.hasEvolution || lhs.evolution == rhs.evolution)
      fieldCheck = fieldCheck && (lhs.hasEvolutionItemRequirement == rhs.hasEvolutionItemRequirement) && (!lhs.hasEvolutionItemRequirement || lhs.evolutionItemRequirement == rhs.evolutionItemRequirement)
      fieldCheck = fieldCheck && (lhs.hasCandyCost == rhs.hasCandyCost) && (!lhs.hasCandyCost || lhs.candyCost == rhs.candyCost)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var evolution:Pogoprotos.Enums.PokemonId = Pogoprotos.Enums.PokemonId.missingno
    public fileprivate(set) var hasEvolution:Bool = false
    public fileprivate(set) var evolutionItemRequirement:Pogoprotos.Inventory.Item.ItemId = Pogoprotos.Inventory.Item.ItemId.itemUnknown
    public fileprivate(set) var hasEvolutionItemRequirement:Bool = false
    public fileprivate(set) var candyCost:Int32 = Int32(0)
    public fileprivate(set) var hasCandyCost:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasEvolution {
        try codedOutputStream.writeEnum(fieldNumber: 1, value:evolution.rawValue)
      }
      if hasEvolutionItemRequirement {
        try codedOutputStream.writeEnum(fieldNumber: 2, value:evolutionItemRequirement.rawValue)
      }
      if hasCandyCost {
        try codedOutputStream.writeInt32(fieldNumber: 3, value:candyCost)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasEvolution) {
        serialize_size += evolution.rawValue.computeEnumSize(fieldNumber: 1)
      }
      if (hasEvolutionItemRequirement) {
        serialize_size += evolutionItemRequirement.rawValue.computeEnumSize(fieldNumber: 2)
      }
      if hasCandyCost {
        serialize_size += candyCost.computeInt32Size(fieldNumber: 3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
      return Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.classBuilder() as! Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
      return try Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Pokemon.EvolutionBranch) throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
      return try Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasEvolution {
        jsonMap["evolution"] = evolution.toString()
      }
      if hasEvolutionItemRequirement {
        jsonMap["evolutionItemRequirement"] = evolutionItemRequirement.toString()
      }
      if hasCandyCost {
        jsonMap["candyCost"] = Int(candyCost)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch {
      return try Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch {
      return try Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasEvolution) {
        output += "\(indent) evolution: \(evolution.description)\n"
      }
      if (hasEvolutionItemRequirement) {
        output += "\(indent) evolutionItemRequirement: \(evolutionItemRequirement.description)\n"
      }
      if hasCandyCost {
        output += "\(indent) candyCost: \(candyCost) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasEvolution {
               hashCode = (hashCode &* 31) &+ Int(evolution.rawValue)
            }
            if hasEvolutionItemRequirement {
               hashCode = (hashCode &* 31) &+ Int(evolutionItemRequirement.rawValue)
            }
            if hasCandyCost {
               hashCode = (hashCode &* 31) &+ candyCost.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Pokemon.EvolutionBranch"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Pokemon.EvolutionBranch"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Settings.Master.Pokemon.EvolutionBranch = Pogoprotos.Settings.Master.Pokemon.EvolutionBranch()
      public func getMessage() -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var evolution:Pogoprotos.Enums.PokemonId {
            get {
                return builderResult.evolution
            }
            set (value) {
                builderResult.hasEvolution = true
                builderResult.evolution = value
            }
        }
        public var hasEvolution:Bool{
            get {
                return builderResult.hasEvolution
            }
        }
      @discardableResult
        public func setEvolution(_ value:Pogoprotos.Enums.PokemonId) -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
          self.evolution = value
          return self
        }
      @discardableResult
        public func clearEvolution() -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
           builderResult.hasEvolution = false
           builderResult.evolution = .missingno
           return self
        }
        public var evolutionItemRequirement:Pogoprotos.Inventory.Item.ItemId {
            get {
                return builderResult.evolutionItemRequirement
            }
            set (value) {
                builderResult.hasEvolutionItemRequirement = true
                builderResult.evolutionItemRequirement = value
            }
        }
        public var hasEvolutionItemRequirement:Bool{
            get {
                return builderResult.hasEvolutionItemRequirement
            }
        }
      @discardableResult
        public func setEvolutionItemRequirement(_ value:Pogoprotos.Inventory.Item.ItemId) -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
          self.evolutionItemRequirement = value
          return self
        }
      @discardableResult
        public func clearEvolutionItemRequirement() -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
           builderResult.hasEvolutionItemRequirement = false
           builderResult.evolutionItemRequirement = .itemUnknown
           return self
        }
      public var candyCost:Int32 {
           get {
                return builderResult.candyCost
           }
           set (value) {
               builderResult.hasCandyCost = true
               builderResult.candyCost = value
           }
      }
      public var hasCandyCost:Bool {
           get {
                return builderResult.hasCandyCost
           }
      }
      @discardableResult
      public func setCandyCost(_ value:Int32) -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
        self.candyCost = value
        return self
      }
      @discardableResult
      public func clearCandyCost() -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder{
           builderResult.hasCandyCost = false
           builderResult.candyCost = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
        builderResult = Pogoprotos.Settings.Master.Pokemon.EvolutionBranch()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
        return try Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch {
        let returnMe:Pogoprotos.Settings.Master.Pokemon.EvolutionBranch = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Settings.Master.Pokemon.EvolutionBranch) throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
        if other == Pogoprotos.Settings.Master.Pokemon.EvolutionBranch() {
         return self
        }
        if other.hasEvolution {
             evolution = other.evolution
        }
        if other.hasEvolutionItemRequirement {
             evolutionItemRequirement = other.evolutionItemRequirement
        }
        if other.hasCandyCost {
             candyCost = other.candyCost
        }
        try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntevolution = try codedInputStream.readEnum()
            if let enumsevolution = Pogoprotos.Enums.PokemonId(rawValue:valueIntevolution){
                 evolution = enumsevolution
            } else {
                 try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntevolution))
            }

          case 16:
            let valueIntevolutionItemRequirement = try codedInputStream.readEnum()
            if let enumsevolutionItemRequirement = Pogoprotos.Inventory.Item.ItemId(rawValue:valueIntevolutionItemRequirement){
                 evolutionItemRequirement = enumsevolutionItemRequirement
            } else {
                 try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntevolutionItemRequirement))
            }

          case 24:
            candyCost = try codedInputStream.readInt32()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder()
        if let jsonValueEvolution = jsonMap["evolution"] as? String {
          resultDecodedBuilder.evolution = try Pogoprotos.Enums.PokemonId.fromString(str: jsonValueEvolution)
        }
        if let jsonValueEvolutionItemRequirement = jsonMap["evolutionItemRequirement"] as? String {
          resultDecodedBuilder.evolutionItemRequirement = try Pogoprotos.Inventory.Item.ItemId.fromString(str: jsonValueEvolutionItemRequirement)
        }
        if let jsonValueCandyCost = jsonMap["candyCost"] as? Int {
          resultDecodedBuilder.candyCost = Int32(jsonValueCandyCost)
        } else if let jsonValueCandyCost = jsonMap["candyCost"] as? String {
          resultDecodedBuilder.candyCost = Int32(jsonValueCandyCost)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class PokemonGenderSettings : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings, rhs: Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasMalePercent == rhs.hasMalePercent) && (!lhs.hasMalePercent || lhs.malePercent == rhs.malePercent)
      fieldCheck = fieldCheck && (lhs.hasFemalePercent == rhs.hasFemalePercent) && (!lhs.hasFemalePercent || lhs.femalePercent == rhs.femalePercent)
      fieldCheck = fieldCheck && (lhs.hasGenderlessPercent == rhs.hasGenderlessPercent) && (!lhs.hasGenderlessPercent || lhs.genderlessPercent == rhs.genderlessPercent)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var malePercent:Float = Float(0)
    public fileprivate(set) var hasMalePercent:Bool = false

    public fileprivate(set) var femalePercent:Float = Float(0)
    public fileprivate(set) var hasFemalePercent:Bool = false

    public fileprivate(set) var genderlessPercent:Float = Float(0)
    public fileprivate(set) var hasGenderlessPercent:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasMalePercent {
        try codedOutputStream.writeFloat(fieldNumber: 1, value:malePercent)
      }
      if hasFemalePercent {
        try codedOutputStream.writeFloat(fieldNumber: 2, value:femalePercent)
      }
      if hasGenderlessPercent {
        try codedOutputStream.writeFloat(fieldNumber: 3, value:genderlessPercent)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasMalePercent {
        serialize_size += malePercent.computeFloatSize(fieldNumber: 1)
      }
      if hasFemalePercent {
        serialize_size += femalePercent.computeFloatSize(fieldNumber: 2)
      }
      if hasGenderlessPercent {
        serialize_size += genderlessPercent.computeFloatSize(fieldNumber: 3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder {
      return Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.classBuilder() as! Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder {
      return try Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings) throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder {
      return try Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasMalePercent {
        jsonMap["malePercent"] = Float(malePercent)
      }
      if hasFemalePercent {
        jsonMap["femalePercent"] = Float(femalePercent)
      }
      if hasGenderlessPercent {
        jsonMap["genderlessPercent"] = Float(genderlessPercent)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings {
      return try Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings {
      return try Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasMalePercent {
        output += "\(indent) malePercent: \(malePercent) \n"
      }
      if hasFemalePercent {
        output += "\(indent) femalePercent: \(femalePercent) \n"
      }
      if hasGenderlessPercent {
        output += "\(indent) genderlessPercent: \(genderlessPercent) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMalePercent {
               hashCode = (hashCode &* 31) &+ malePercent.hashValue
            }
            if hasFemalePercent {
               hashCode = (hashCode &* 31) &+ femalePercent.hashValue
            }
            if hasGenderlessPercent {
               hashCode = (hashCode &* 31) &+ genderlessPercent.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings = Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var malePercent:Float {
           get {
                return builderResult.malePercent
           }
           set (value) {
               builderResult.hasMalePercent = true
               builderResult.malePercent = value
           }
      }
      public var hasMalePercent:Bool {
           get {
                return builderResult.hasMalePercent
           }
      }
      @discardableResult
      public func setMalePercent(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder {
        self.malePercent = value
        return self
      }
      @discardableResult
      public func clearMalePercent() -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder{
           builderResult.hasMalePercent = false
           builderResult.malePercent = Float(0)
           return self
      }
      public var femalePercent:Float {
           get {
                return builderResult.femalePercent
           }
           set (value) {
               builderResult.hasFemalePercent = true
               builderResult.femalePercent = value
           }
      }
      public var hasFemalePercent:Bool {
           get {
                return builderResult.hasFemalePercent
           }
      }
      @discardableResult
      public func setFemalePercent(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder {
        self.femalePercent = value
        return self
      }
      @discardableResult
      public func clearFemalePercent() -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder{
           builderResult.hasFemalePercent = false
           builderResult.femalePercent = Float(0)
           return self
      }
      public var genderlessPercent:Float {
           get {
                return builderResult.genderlessPercent
           }
           set (value) {
               builderResult.hasGenderlessPercent = true
               builderResult.genderlessPercent = value
           }
      }
      public var hasGenderlessPercent:Bool {
           get {
                return builderResult.hasGenderlessPercent
           }
      }
      @discardableResult
      public func setGenderlessPercent(_ value:Float) -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder {
        self.genderlessPercent = value
        return self
      }
      @discardableResult
      public func clearGenderlessPercent() -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder{
           builderResult.hasGenderlessPercent = false
           builderResult.genderlessPercent = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder {
        return try Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings {
        let returnMe:Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings) throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder {
        if other == Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings() {
         return self
        }
        if other.hasMalePercent {
             malePercent = other.malePercent
        }
        if other.hasFemalePercent {
             femalePercent = other.femalePercent
        }
        if other.hasGenderlessPercent {
             genderlessPercent = other.genderlessPercent
        }
        try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 13:
            malePercent = try codedInputStream.readFloat()

          case 21:
            femalePercent = try codedInputStream.readFloat()

          case 29:
            genderlessPercent = try codedInputStream.readFloat()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder()
        if let jsonValueMalePercent = jsonMap["malePercent"] as? Float {
          resultDecodedBuilder.malePercent = Float(jsonValueMalePercent)
        } else if let jsonValueMalePercent = jsonMap["malePercent"] as? String {
          resultDecodedBuilder.malePercent = Float(jsonValueMalePercent)!
        }
        if let jsonValueFemalePercent = jsonMap["femalePercent"] as? Float {
          resultDecodedBuilder.femalePercent = Float(jsonValueFemalePercent)
        } else if let jsonValueFemalePercent = jsonMap["femalePercent"] as? String {
          resultDecodedBuilder.femalePercent = Float(jsonValueFemalePercent)!
        }
        if let jsonValueGenderlessPercent = jsonMap["genderlessPercent"] as? Float {
          resultDecodedBuilder.genderlessPercent = Float(jsonValueGenderlessPercent)
        } else if let jsonValueGenderlessPercent = jsonMap["genderlessPercent"] as? String {
          resultDecodedBuilder.genderlessPercent = Float(jsonValueGenderlessPercent)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class StatsAttributes : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Settings.Master.Pokemon.StatsAttributes, rhs: Pogoprotos.Settings.Master.Pokemon.StatsAttributes) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasBaseStamina == rhs.hasBaseStamina) && (!lhs.hasBaseStamina || lhs.baseStamina == rhs.baseStamina)
      fieldCheck = fieldCheck && (lhs.hasBaseAttack == rhs.hasBaseAttack) && (!lhs.hasBaseAttack || lhs.baseAttack == rhs.baseAttack)
      fieldCheck = fieldCheck && (lhs.hasBaseDefense == rhs.hasBaseDefense) && (!lhs.hasBaseDefense || lhs.baseDefense == rhs.baseDefense)
      fieldCheck = fieldCheck && (lhs.hasDodgeEnergyDelta == rhs.hasDodgeEnergyDelta) && (!lhs.hasDodgeEnergyDelta || lhs.dodgeEnergyDelta == rhs.dodgeEnergyDelta)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var baseStamina:Int32 = Int32(0)
    public fileprivate(set) var hasBaseStamina:Bool = false

    public fileprivate(set) var baseAttack:Int32 = Int32(0)
    public fileprivate(set) var hasBaseAttack:Bool = false

    public fileprivate(set) var baseDefense:Int32 = Int32(0)
    public fileprivate(set) var hasBaseDefense:Bool = false

    public fileprivate(set) var dodgeEnergyDelta:Int32 = Int32(0)
    public fileprivate(set) var hasDodgeEnergyDelta:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasBaseStamina {
        try codedOutputStream.writeInt32(fieldNumber: 1, value:baseStamina)
      }
      if hasBaseAttack {
        try codedOutputStream.writeInt32(fieldNumber: 2, value:baseAttack)
      }
      if hasBaseDefense {
        try codedOutputStream.writeInt32(fieldNumber: 3, value:baseDefense)
      }
      if hasDodgeEnergyDelta {
        try codedOutputStream.writeInt32(fieldNumber: 8, value:dodgeEnergyDelta)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasBaseStamina {
        serialize_size += baseStamina.computeInt32Size(fieldNumber: 1)
      }
      if hasBaseAttack {
        serialize_size += baseAttack.computeInt32Size(fieldNumber: 2)
      }
      if hasBaseDefense {
        serialize_size += baseDefense.computeInt32Size(fieldNumber: 3)
      }
      if hasDodgeEnergyDelta {
        serialize_size += dodgeEnergyDelta.computeInt32Size(fieldNumber: 8)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
      return Pogoprotos.Settings.Master.Pokemon.StatsAttributes.classBuilder() as! Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
      return try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Pokemon.StatsAttributes) throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
      return try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasBaseStamina {
        jsonMap["baseStamina"] = Int(baseStamina)
      }
      if hasBaseAttack {
        jsonMap["baseAttack"] = Int(baseAttack)
      }
      if hasBaseDefense {
        jsonMap["baseDefense"] = Int(baseDefense)
      }
      if hasDodgeEnergyDelta {
        jsonMap["dodgeEnergyDelta"] = Int(dodgeEnergyDelta)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes {
      return try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes {
      return try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasBaseStamina {
        output += "\(indent) baseStamina: \(baseStamina) \n"
      }
      if hasBaseAttack {
        output += "\(indent) baseAttack: \(baseAttack) \n"
      }
      if hasBaseDefense {
        output += "\(indent) baseDefense: \(baseDefense) \n"
      }
      if hasDodgeEnergyDelta {
        output += "\(indent) dodgeEnergyDelta: \(dodgeEnergyDelta) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasBaseStamina {
               hashCode = (hashCode &* 31) &+ baseStamina.hashValue
            }
            if hasBaseAttack {
               hashCode = (hashCode &* 31) &+ baseAttack.hashValue
            }
            if hasBaseDefense {
               hashCode = (hashCode &* 31) &+ baseDefense.hashValue
            }
            if hasDodgeEnergyDelta {
               hashCode = (hashCode &* 31) &+ dodgeEnergyDelta.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Pokemon.StatsAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Pokemon.StatsAttributes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Settings.Master.Pokemon.StatsAttributes = Pogoprotos.Settings.Master.Pokemon.StatsAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var baseStamina:Int32 {
           get {
                return builderResult.baseStamina
           }
           set (value) {
               builderResult.hasBaseStamina = true
               builderResult.baseStamina = value
           }
      }
      public var hasBaseStamina:Bool {
           get {
                return builderResult.hasBaseStamina
           }
      }
      @discardableResult
      public func setBaseStamina(_ value:Int32) -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
        self.baseStamina = value
        return self
      }
      @discardableResult
      public func clearBaseStamina() -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder{
           builderResult.hasBaseStamina = false
           builderResult.baseStamina = Int32(0)
           return self
      }
      public var baseAttack:Int32 {
           get {
                return builderResult.baseAttack
           }
           set (value) {
               builderResult.hasBaseAttack = true
               builderResult.baseAttack = value
           }
      }
      public var hasBaseAttack:Bool {
           get {
                return builderResult.hasBaseAttack
           }
      }
      @discardableResult
      public func setBaseAttack(_ value:Int32) -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
        self.baseAttack = value
        return self
      }
      @discardableResult
      public func clearBaseAttack() -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder{
           builderResult.hasBaseAttack = false
           builderResult.baseAttack = Int32(0)
           return self
      }
      public var baseDefense:Int32 {
           get {
                return builderResult.baseDefense
           }
           set (value) {
               builderResult.hasBaseDefense = true
               builderResult.baseDefense = value
           }
      }
      public var hasBaseDefense:Bool {
           get {
                return builderResult.hasBaseDefense
           }
      }
      @discardableResult
      public func setBaseDefense(_ value:Int32) -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
        self.baseDefense = value
        return self
      }
      @discardableResult
      public func clearBaseDefense() -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder{
           builderResult.hasBaseDefense = false
           builderResult.baseDefense = Int32(0)
           return self
      }
      public var dodgeEnergyDelta:Int32 {
           get {
                return builderResult.dodgeEnergyDelta
           }
           set (value) {
               builderResult.hasDodgeEnergyDelta = true
               builderResult.dodgeEnergyDelta = value
           }
      }
      public var hasDodgeEnergyDelta:Bool {
           get {
                return builderResult.hasDodgeEnergyDelta
           }
      }
      @discardableResult
      public func setDodgeEnergyDelta(_ value:Int32) -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
        self.dodgeEnergyDelta = value
        return self
      }
      @discardableResult
      public func clearDodgeEnergyDelta() -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder{
           builderResult.hasDodgeEnergyDelta = false
           builderResult.dodgeEnergyDelta = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Pokemon.StatsAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
        return try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes {
        let returnMe:Pogoprotos.Settings.Master.Pokemon.StatsAttributes = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Settings.Master.Pokemon.StatsAttributes) throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Pokemon.StatsAttributes() {
         return self
        }
        if other.hasBaseStamina {
             baseStamina = other.baseStamina
        }
        if other.hasBaseAttack {
             baseAttack = other.baseAttack
        }
        if other.hasBaseDefense {
             baseDefense = other.baseDefense
        }
        if other.hasDodgeEnergyDelta {
             dodgeEnergyDelta = other.dodgeEnergyDelta
        }
        try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            baseStamina = try codedInputStream.readInt32()

          case 16:
            baseAttack = try codedInputStream.readInt32()

          case 24:
            baseDefense = try codedInputStream.readInt32()

          case 64:
            dodgeEnergyDelta = try codedInputStream.readInt32()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder()
        if let jsonValueBaseStamina = jsonMap["baseStamina"] as? Int {
          resultDecodedBuilder.baseStamina = Int32(jsonValueBaseStamina)
        } else if let jsonValueBaseStamina = jsonMap["baseStamina"] as? String {
          resultDecodedBuilder.baseStamina = Int32(jsonValueBaseStamina)!
        }
        if let jsonValueBaseAttack = jsonMap["baseAttack"] as? Int {
          resultDecodedBuilder.baseAttack = Int32(jsonValueBaseAttack)
        } else if let jsonValueBaseAttack = jsonMap["baseAttack"] as? String {
          resultDecodedBuilder.baseAttack = Int32(jsonValueBaseAttack)!
        }
        if let jsonValueBaseDefense = jsonMap["baseDefense"] as? Int {
          resultDecodedBuilder.baseDefense = Int32(jsonValueBaseDefense)
        } else if let jsonValueBaseDefense = jsonMap["baseDefense"] as? String {
          resultDecodedBuilder.baseDefense = Int32(jsonValueBaseDefense)!
        }
        if let jsonValueDodgeEnergyDelta = jsonMap["dodgeEnergyDelta"] as? Int {
          resultDecodedBuilder.dodgeEnergyDelta = Int32(jsonValueDodgeEnergyDelta)
        } else if let jsonValueDodgeEnergyDelta = jsonMap["dodgeEnergyDelta"] as? String {
          resultDecodedBuilder.dodgeEnergyDelta = Int32(jsonValueDodgeEnergyDelta)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

}
extension Pogoprotos.Settings.Master.Pokemon.CameraAttributes: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Pokemon.CameraAttributes> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Pokemon.CameraAttributes>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes? {
    return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Pokemon.PogoprotosSettingsMasterPokemonRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Settings.Master.Pokemon.EncounterAttributes: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Pokemon.EncounterAttributes> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Pokemon.EncounterAttributes>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes? {
    return try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Pokemon.PogoprotosSettingsMasterPokemonRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Settings.Master.Pokemon.EvolutionBranch: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Pokemon.EvolutionBranch> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Pokemon.EvolutionBranch>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch? {
    return try Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch {
    return try Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Pokemon.PogoprotosSettingsMasterPokemonRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch {
    return try Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch {
    return try Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch {
    return try Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch {
    return try Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.EvolutionBranch {
    return try Pogoprotos.Settings.Master.Pokemon.EvolutionBranch.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings? {
    return try Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings {
    return try Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Pokemon.PogoprotosSettingsMasterPokemonRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings {
    return try Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings {
    return try Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings {
    return try Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings {
    return try Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings {
    return try Pogoprotos.Settings.Master.Pokemon.PokemonGenderSettings.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Settings.Master.Pokemon.StatsAttributes: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Pokemon.StatsAttributes> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Pokemon.StatsAttributes>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes? {
    return try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Pokemon.PogoprotosSettingsMasterPokemonRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes {
    return try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)
