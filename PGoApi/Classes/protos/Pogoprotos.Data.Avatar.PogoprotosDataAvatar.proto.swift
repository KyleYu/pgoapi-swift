// Generated by the Protocol Buffers 3.2 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Data.Avatar.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public extension Pogoprotos.Data.Avatar {
  public struct PogoprotosDataAvatarRoot {
    public static let `default` = PogoprotosDataAvatarRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
  }

  final public class AvatarCustomization : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Data.Avatar.AvatarCustomization, rhs: Pogoprotos.Data.Avatar.AvatarCustomization) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasAvatarTemplateId == rhs.hasAvatarTemplateId) && (!lhs.hasAvatarTemplateId || lhs.avatarTemplateId == rhs.avatarTemplateId)
      fieldCheck = fieldCheck && (lhs.labels == rhs.labels)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }



      //Enum type declaration start 

      public enum Label:Int32, CustomDebugStringConvertible, CustomStringConvertible {
        case unsetLabel = 0
        case `default` = 1
        case owned = 2
        case featured = 3
        case new = 4
        case sale = 5
        case purchasable = 6
        case unlockable = 7
        case viewed = 8
        case lockedPurchasable = 9
        public func toString() -> String {
          switch self {
          case .unsetLabel: return "UNSET_LABEL"
          case .`default`: return "DEFAULT"
          case .owned: return "OWNED"
          case .featured: return "FEATURED"
          case .new: return "NEW"
          case .sale: return "SALE"
          case .purchasable: return "PURCHASABLE"
          case .unlockable: return "UNLOCKABLE"
          case .viewed: return "VIEWED"
          case .lockedPurchasable: return "LOCKED_PURCHASABLE"
          }
        }
        public static func fromString(str:String) throws -> Pogoprotos.Data.Avatar.AvatarCustomization.Label {
          switch str {
          case "UNSET_LABEL":  return .unsetLabel
          case "DEFAULT":  return .`default`
          case "OWNED":  return .owned
          case "FEATURED":  return .featured
          case "NEW":  return .new
          case "SALE":  return .sale
          case "PURCHASABLE":  return .purchasable
          case "UNLOCKABLE":  return .unlockable
          case "VIEWED":  return .viewed
          case "LOCKED_PURCHASABLE":  return .lockedPurchasable
          default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
          }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
          switch self {
          case .unsetLabel: return ".unsetLabel"
          case .`default`: return ".`default`"
          case .owned: return ".owned"
          case .featured: return ".featured"
          case .new: return ".new"
          case .sale: return ".sale"
          case .purchasable: return ".purchasable"
          case .unlockable: return ".unlockable"
          case .viewed: return ".viewed"
          case .lockedPurchasable: return ".lockedPurchasable"
          }
        }
      }

      //Enum type declaration end 

    public fileprivate(set) var avatarTemplateId:String = ""
    public fileprivate(set) var hasAvatarTemplateId:Bool = false

    private var labelsMemoizedSerializedSize:Int32 = 0
    public fileprivate(set) var labels:Array<Pogoprotos.Data.Avatar.AvatarCustomization.Label> = Array<Pogoprotos.Data.Avatar.AvatarCustomization.Label>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasAvatarTemplateId {
        try codedOutputStream.writeString(fieldNumber: 1, value:avatarTemplateId)
      }
      if !labels.isEmpty {
        try codedOutputStream.writeRawVarint32(value: 18)
        try codedOutputStream.writeRawVarint32(value: labelsMemoizedSerializedSize)
      }
      for oneValueOflabels in labels {
          try codedOutputStream.writeEnumNoTag(value: oneValueOflabels.rawValue)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasAvatarTemplateId {
        serialize_size += avatarTemplateId.computeStringSize(fieldNumber: 1)
      }
      var dataSizelabels:Int32 = 0
      for oneValueOflabels in labels {
          dataSizelabels += oneValueOflabels.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizelabels
      if !labels.isEmpty {
        serialize_size += 1
        serialize_size += dataSizelabels.computeRawVarint32Size()
      }
      labelsMemoizedSerializedSize = dataSizelabels
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Data.Avatar.AvatarCustomization.Builder {
      return Pogoprotos.Data.Avatar.AvatarCustomization.classBuilder() as! Pogoprotos.Data.Avatar.AvatarCustomization.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Avatar.AvatarCustomization.Builder {
      return classBuilder() as! Pogoprotos.Data.Avatar.AvatarCustomization.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Avatar.AvatarCustomization.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Avatar.AvatarCustomization.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Avatar.AvatarCustomization.Builder {
      return try Pogoprotos.Data.Avatar.AvatarCustomization.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Avatar.AvatarCustomization) throws -> Pogoprotos.Data.Avatar.AvatarCustomization.Builder {
      return try Pogoprotos.Data.Avatar.AvatarCustomization.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasAvatarTemplateId {
        jsonMap["avatarTemplateId"] = avatarTemplateId
      }
      if !labels.isEmpty {
        var jsonArrayLabels:Array<String> = []
          for oneValueLabels in labels {
            jsonArrayLabels.append(oneValueLabels.toString())
          }
        jsonMap["labels"] = jsonArrayLabels
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Avatar.AvatarCustomization {
      return try Pogoprotos.Data.Avatar.AvatarCustomization.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Data.Avatar.AvatarCustomization {
      return try Pogoprotos.Data.Avatar.AvatarCustomization.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasAvatarTemplateId {
        output += "\(indent) avatarTemplateId: \(avatarTemplateId) \n"
      }
      var labelsElementIndex:Int = 0
      for oneValueOflabels in labels {
          output += "\(indent) labels[\(labelsElementIndex)]: \(oneValueOflabels.description)\n"
          labelsElementIndex += 1
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasAvatarTemplateId {
               hashCode = (hashCode &* 31) &+ avatarTemplateId.hashValue
            }
            for oneValueOflabels in labels {
                hashCode = (hashCode &* 31) &+ Int(oneValueOflabels.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Avatar.AvatarCustomization"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Avatar.AvatarCustomization"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Data.Avatar.AvatarCustomization = Pogoprotos.Data.Avatar.AvatarCustomization()
      public func getMessage() -> Pogoprotos.Data.Avatar.AvatarCustomization {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var avatarTemplateId:String {
           get {
                return builderResult.avatarTemplateId
           }
           set (value) {
               builderResult.hasAvatarTemplateId = true
               builderResult.avatarTemplateId = value
           }
      }
      public var hasAvatarTemplateId:Bool {
           get {
                return builderResult.hasAvatarTemplateId
           }
      }
      @discardableResult
      public func setAvatarTemplateId(_ value:String) -> Pogoprotos.Data.Avatar.AvatarCustomization.Builder {
        self.avatarTemplateId = value
        return self
      }
      @discardableResult
      public func clearAvatarTemplateId() -> Pogoprotos.Data.Avatar.AvatarCustomization.Builder{
           builderResult.hasAvatarTemplateId = false
           builderResult.avatarTemplateId = ""
           return self
      }
      public var labels:Array<Pogoprotos.Data.Avatar.AvatarCustomization.Label> {
          get {
              return builderResult.labels
          }
          set (value) {
              builderResult.labels = value
          }
      }
      @discardableResult
      public func setLabels(_ value:Array<Pogoprotos.Data.Avatar.AvatarCustomization.Label>) -> Pogoprotos.Data.Avatar.AvatarCustomization.Builder {
        self.labels = value
        return self
      }
      @discardableResult
      public func clearLabels() -> Pogoprotos.Data.Avatar.AvatarCustomization.Builder {
        builderResult.labels.removeAll(keepingCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Data.Avatar.AvatarCustomization.Builder {
        builderResult = Pogoprotos.Data.Avatar.AvatarCustomization()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Avatar.AvatarCustomization.Builder {
        return try Pogoprotos.Data.Avatar.AvatarCustomization.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Avatar.AvatarCustomization {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Avatar.AvatarCustomization {
        let returnMe:Pogoprotos.Data.Avatar.AvatarCustomization = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Data.Avatar.AvatarCustomization) throws -> Pogoprotos.Data.Avatar.AvatarCustomization.Builder {
        if other == Pogoprotos.Data.Avatar.AvatarCustomization() {
         return self
        }
        if other.hasAvatarTemplateId {
             avatarTemplateId = other.avatarTemplateId
        }
        if !other.labels.isEmpty {
           builderResult.labels += other.labels
        }
        try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Avatar.AvatarCustomization.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Avatar.AvatarCustomization.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            avatarTemplateId = try codedInputStream.readString()

          case 18:
            let length = Int(try codedInputStream.readRawVarint32())
            let oldLimit = try codedInputStream.pushLimit(byteLimit: length)
            while codedInputStream.bytesUntilLimit() > 0 {
            let valueIntlabels = try codedInputStream.readEnum()
            if let enumslabels = Pogoprotos.Data.Avatar.AvatarCustomization.Label(rawValue:valueIntlabels) {
                 builderResult.labels.append(enumslabels)
            } else {
                 try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntlabels))
            }
            }
            codedInputStream.popLimit(oldLimit: oldLimit)

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Avatar.AvatarCustomization.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Avatar.AvatarCustomization.Builder()
        if let jsonValueAvatarTemplateId = jsonMap["avatarTemplateId"] as? String {
          resultDecodedBuilder.avatarTemplateId = jsonValueAvatarTemplateId
        }
        if let jsonValueLabels = jsonMap["labels"] as? Array<String> {
          var jsonArrayLabels:Array<Pogoprotos.Data.Avatar.AvatarCustomization.Label> = []
          for oneValueLabels in jsonValueLabels {
            let enumFromStringLabels = try Pogoprotos.Data.Avatar.AvatarCustomization.Label.fromString(str: oneValueLabels)
            jsonArrayLabels.append(enumFromStringLabels)
          }
          resultDecodedBuilder.labels = jsonArrayLabels
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Data.Avatar.AvatarCustomization.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Avatar.AvatarCustomization.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class AvatarItem : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Data.Avatar.AvatarItem, rhs: Pogoprotos.Data.Avatar.AvatarItem) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasAvatarTemplateId == rhs.hasAvatarTemplateId) && (!lhs.hasAvatarTemplateId || lhs.avatarTemplateId == rhs.avatarTemplateId)
      fieldCheck = fieldCheck && (lhs.hasNewTimestampMs == rhs.hasNewTimestampMs) && (!lhs.hasNewTimestampMs || lhs.newTimestampMs == rhs.newTimestampMs)
      fieldCheck = fieldCheck && (lhs.hasViewed == rhs.hasViewed) && (!lhs.hasViewed || lhs.viewed == rhs.viewed)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var avatarTemplateId:String = ""
    public fileprivate(set) var hasAvatarTemplateId:Bool = false

    public fileprivate(set) var newTimestampMs:Int64 = Int64(0)
    public fileprivate(set) var hasNewTimestampMs:Bool = false

    public fileprivate(set) var viewed:Bool = false
    public fileprivate(set) var hasViewed:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasAvatarTemplateId {
        try codedOutputStream.writeString(fieldNumber: 1, value:avatarTemplateId)
      }
      if hasNewTimestampMs {
        try codedOutputStream.writeInt64(fieldNumber: 2, value:newTimestampMs)
      }
      if hasViewed {
        try codedOutputStream.writeBool(fieldNumber: 3, value:viewed)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasAvatarTemplateId {
        serialize_size += avatarTemplateId.computeStringSize(fieldNumber: 1)
      }
      if hasNewTimestampMs {
        serialize_size += newTimestampMs.computeInt64Size(fieldNumber: 2)
      }
      if hasViewed {
        serialize_size += viewed.computeBoolSize(fieldNumber: 3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Data.Avatar.AvatarItem.Builder {
      return Pogoprotos.Data.Avatar.AvatarItem.classBuilder() as! Pogoprotos.Data.Avatar.AvatarItem.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Avatar.AvatarItem.Builder {
      return classBuilder() as! Pogoprotos.Data.Avatar.AvatarItem.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Avatar.AvatarItem.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Avatar.AvatarItem.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Avatar.AvatarItem.Builder {
      return try Pogoprotos.Data.Avatar.AvatarItem.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Avatar.AvatarItem) throws -> Pogoprotos.Data.Avatar.AvatarItem.Builder {
      return try Pogoprotos.Data.Avatar.AvatarItem.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasAvatarTemplateId {
        jsonMap["avatarTemplateId"] = avatarTemplateId
      }
      if hasNewTimestampMs {
        jsonMap["newTimestampMs"] = "\(newTimestampMs)"
      }
      if hasViewed {
        jsonMap["viewed"] = viewed
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Avatar.AvatarItem {
      return try Pogoprotos.Data.Avatar.AvatarItem.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Data.Avatar.AvatarItem {
      return try Pogoprotos.Data.Avatar.AvatarItem.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasAvatarTemplateId {
        output += "\(indent) avatarTemplateId: \(avatarTemplateId) \n"
      }
      if hasNewTimestampMs {
        output += "\(indent) newTimestampMs: \(newTimestampMs) \n"
      }
      if hasViewed {
        output += "\(indent) viewed: \(viewed) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasAvatarTemplateId {
               hashCode = (hashCode &* 31) &+ avatarTemplateId.hashValue
            }
            if hasNewTimestampMs {
               hashCode = (hashCode &* 31) &+ newTimestampMs.hashValue
            }
            if hasViewed {
               hashCode = (hashCode &* 31) &+ viewed.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Avatar.AvatarItem"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Avatar.AvatarItem"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Data.Avatar.AvatarItem = Pogoprotos.Data.Avatar.AvatarItem()
      public func getMessage() -> Pogoprotos.Data.Avatar.AvatarItem {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var avatarTemplateId:String {
           get {
                return builderResult.avatarTemplateId
           }
           set (value) {
               builderResult.hasAvatarTemplateId = true
               builderResult.avatarTemplateId = value
           }
      }
      public var hasAvatarTemplateId:Bool {
           get {
                return builderResult.hasAvatarTemplateId
           }
      }
      @discardableResult
      public func setAvatarTemplateId(_ value:String) -> Pogoprotos.Data.Avatar.AvatarItem.Builder {
        self.avatarTemplateId = value
        return self
      }
      @discardableResult
      public func clearAvatarTemplateId() -> Pogoprotos.Data.Avatar.AvatarItem.Builder{
           builderResult.hasAvatarTemplateId = false
           builderResult.avatarTemplateId = ""
           return self
      }
      public var newTimestampMs:Int64 {
           get {
                return builderResult.newTimestampMs
           }
           set (value) {
               builderResult.hasNewTimestampMs = true
               builderResult.newTimestampMs = value
           }
      }
      public var hasNewTimestampMs:Bool {
           get {
                return builderResult.hasNewTimestampMs
           }
      }
      @discardableResult
      public func setNewTimestampMs(_ value:Int64) -> Pogoprotos.Data.Avatar.AvatarItem.Builder {
        self.newTimestampMs = value
        return self
      }
      @discardableResult
      public func clearNewTimestampMs() -> Pogoprotos.Data.Avatar.AvatarItem.Builder{
           builderResult.hasNewTimestampMs = false
           builderResult.newTimestampMs = Int64(0)
           return self
      }
      public var viewed:Bool {
           get {
                return builderResult.viewed
           }
           set (value) {
               builderResult.hasViewed = true
               builderResult.viewed = value
           }
      }
      public var hasViewed:Bool {
           get {
                return builderResult.hasViewed
           }
      }
      @discardableResult
      public func setViewed(_ value:Bool) -> Pogoprotos.Data.Avatar.AvatarItem.Builder {
        self.viewed = value
        return self
      }
      @discardableResult
      public func clearViewed() -> Pogoprotos.Data.Avatar.AvatarItem.Builder{
           builderResult.hasViewed = false
           builderResult.viewed = false
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Data.Avatar.AvatarItem.Builder {
        builderResult = Pogoprotos.Data.Avatar.AvatarItem()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Avatar.AvatarItem.Builder {
        return try Pogoprotos.Data.Avatar.AvatarItem.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Avatar.AvatarItem {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Avatar.AvatarItem {
        let returnMe:Pogoprotos.Data.Avatar.AvatarItem = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Data.Avatar.AvatarItem) throws -> Pogoprotos.Data.Avatar.AvatarItem.Builder {
        if other == Pogoprotos.Data.Avatar.AvatarItem() {
         return self
        }
        if other.hasAvatarTemplateId {
             avatarTemplateId = other.avatarTemplateId
        }
        if other.hasNewTimestampMs {
             newTimestampMs = other.newTimestampMs
        }
        if other.hasViewed {
             viewed = other.viewed
        }
        try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Avatar.AvatarItem.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Avatar.AvatarItem.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            avatarTemplateId = try codedInputStream.readString()

          case 16:
            newTimestampMs = try codedInputStream.readInt64()

          case 24:
            viewed = try codedInputStream.readBool()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Avatar.AvatarItem.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Avatar.AvatarItem.Builder()
        if let jsonValueAvatarTemplateId = jsonMap["avatarTemplateId"] as? String {
          resultDecodedBuilder.avatarTemplateId = jsonValueAvatarTemplateId
        }
        if let jsonValueNewTimestampMs = jsonMap["newTimestampMs"] as? String {
          resultDecodedBuilder.newTimestampMs = Int64(jsonValueNewTimestampMs)!
        } else if let jsonValueNewTimestampMs = jsonMap["newTimestampMs"] as? Int {
          resultDecodedBuilder.newTimestampMs = Int64(jsonValueNewTimestampMs)
        }
        if let jsonValueViewed = jsonMap["viewed"] as? Bool {
          resultDecodedBuilder.viewed = jsonValueViewed
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Data.Avatar.AvatarItem.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Avatar.AvatarItem.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

}
extension Pogoprotos.Data.Avatar.AvatarCustomization: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Data.Avatar.AvatarCustomization> {
    var mergedArray = Array<Pogoprotos.Data.Avatar.AvatarCustomization>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Avatar.AvatarCustomization? {
    return try Pogoprotos.Data.Avatar.AvatarCustomization.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Data.Avatar.AvatarCustomization {
    return try Pogoprotos.Data.Avatar.AvatarCustomization.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Data.Avatar.PogoprotosDataAvatarRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Avatar.AvatarCustomization {
    return try Pogoprotos.Data.Avatar.AvatarCustomization.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Avatar.AvatarCustomization {
    return try Pogoprotos.Data.Avatar.AvatarCustomization.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Avatar.AvatarCustomization {
    return try Pogoprotos.Data.Avatar.AvatarCustomization.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Avatar.AvatarCustomization {
    return try Pogoprotos.Data.Avatar.AvatarCustomization.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Avatar.AvatarCustomization {
    return try Pogoprotos.Data.Avatar.AvatarCustomization.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Data.Avatar.AvatarItem: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Data.Avatar.AvatarItem> {
    var mergedArray = Array<Pogoprotos.Data.Avatar.AvatarItem>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Avatar.AvatarItem? {
    return try Pogoprotos.Data.Avatar.AvatarItem.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Data.Avatar.AvatarItem {
    return try Pogoprotos.Data.Avatar.AvatarItem.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Data.Avatar.PogoprotosDataAvatarRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Avatar.AvatarItem {
    return try Pogoprotos.Data.Avatar.AvatarItem.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Avatar.AvatarItem {
    return try Pogoprotos.Data.Avatar.AvatarItem.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Avatar.AvatarItem {
    return try Pogoprotos.Data.Avatar.AvatarItem.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Avatar.AvatarItem {
    return try Pogoprotos.Data.Avatar.AvatarItem.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Avatar.AvatarItem {
    return try Pogoprotos.Data.Avatar.AvatarItem.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)
