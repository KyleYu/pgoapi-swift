// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Networking.Platform.Responses.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public func == (lhs: Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse, rhs: Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasResult == rhs.hasResult) && (!lhs.hasResult || lhs.result == rhs.result)
  fieldCheck = fieldCheck && (lhs.hasPurchaseToken == rhs.hasPurchaseToken) && (!lhs.hasPurchaseToken || lhs.purchaseToken == rhs.purchaseToken)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse, rhs: Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasResult == rhs.hasResult) && (!lhs.hasResult || lhs.result == rhs.result)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse, rhs: Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = fieldCheck && (lhs.items == rhs.items)
  fieldCheck = fieldCheck && (lhs.playerCurrencies == rhs.playerCurrencies)
  fieldCheck = fieldCheck && (lhs.hasUnknown4 == rhs.hasUnknown4) && (!lhs.hasUnknown4 || lhs.unknown4 == rhs.unknown4)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem, rhs: Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasItemId == rhs.hasItemId) && (!lhs.hasItemId || lhs.itemId == rhs.itemId)
  fieldCheck = fieldCheck && (lhs.hasIsIap == rhs.hasIsIap) && (!lhs.hasIsIap || lhs.isIap == rhs.isIap)
  fieldCheck = fieldCheck && (lhs.hasCurrencyToBuy == rhs.hasCurrencyToBuy) && (!lhs.hasCurrencyToBuy || lhs.currencyToBuy == rhs.currencyToBuy)
  fieldCheck = fieldCheck && (lhs.hasYieldsCurrency == rhs.hasYieldsCurrency) && (!lhs.hasYieldsCurrency || lhs.yieldsCurrency == rhs.yieldsCurrency)
  fieldCheck = fieldCheck && (lhs.hasYieldsItem == rhs.hasYieldsItem) && (!lhs.hasYieldsItem || lhs.yieldsItem == rhs.yieldsItem)
  fieldCheck = fieldCheck && (lhs.hasTags == rhs.hasTags) && (!lhs.hasTags || lhs.tags == rhs.tags)
  fieldCheck = fieldCheck && (lhs.hasUnknown7 == rhs.hasUnknown7) && (!lhs.hasUnknown7 || lhs.unknown7 == rhs.unknown7)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry, rhs: Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse, rhs: Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasReceived == rhs.hasReceived) && (!lhs.hasReceived || lhs.received == rhs.received)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Platform.Responses {
  public struct PogoprotosNetworkingPlatformResponsesRoot {
    public static var sharedInstance : PogoprotosNetworkingPlatformResponsesRoot {
     struct Static {
         static let instance : PogoprotosNetworkingPlatformResponsesRoot = PogoprotosNetworkingPlatformResponsesRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Player.PogoprotosDataPlayerRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.Item.PogoprotosInventoryItemRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class BuyItemAndroidResponse : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      // THESE ARE SOMEWHAT SPECULATED, failed may be 2
      public enum Status:Int32, CustomDebugStringConvertible, CustomStringConvertible {
        case Unknown = 0
        case Success = 1
        public func toString() -> String {
          switch self {
          case .Unknown: return "UNKNOWN"
          case .Success: return "SUCCESS"
          }
        }
        public static func fromString(str:String) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Status {
          switch str {
          case "UNKNOWN":  return .Unknown
          case "SUCCESS":  return .Success
          default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
          }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
                case .Unknown: return ".Unknown"
                case .Success: return ".Success"
            }
        }
      }

      //Enum type declaration end 

    public private(set) var result:Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Status = Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Status.Unknown
    public private(set) var hasResult:Bool = false
    public private(set) var hasPurchaseToken:Bool = false
    public private(set) var purchaseToken:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasResult {
        try output.writeEnum(1, value:result.rawValue)
      }
      if hasPurchaseToken {
        try output.writeString(2, value:purchaseToken)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasResult) {
        serialize_size += result.rawValue.computeEnumSize(1)
      }
      if hasPurchaseToken {
        serialize_size += purchaseToken.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse> {
      var mergedArray = Array<Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse? {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Platform.Responses.PogoprotosNetworkingPlatformResponsesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder {
      return Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.classBuilder() as! Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder {
      return classBuilder() as! Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasResult {
        jsonMap["result"] = result.toString()
      }
      if hasPurchaseToken {
        jsonMap["purchaseToken"] = purchaseToken
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasResult) {
        output += "\(indent) result: \(result.description)\n"
      }
      if hasPurchaseToken {
        output += "\(indent) purchaseToken: \(purchaseToken) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasResult {
               hashCode = (hashCode &* 31) &+ Int(result.rawValue)
            }
            if hasPurchaseToken {
               hashCode = (hashCode &* 31) &+ purchaseToken.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse = Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse()
      public func getMessage() -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasResult:Bool{
            get {
                return builderResult.hasResult
            }
        }
        public var result:Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Status {
            get {
                return builderResult.result
            }
            set (value) {
                builderResult.hasResult = true
                builderResult.result = value
            }
        }
        public func setResult(value:Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Status) -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder {
          self.result = value
          return self
        }
        public func clearResult() -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder {
           builderResult.hasResult = false
           builderResult.result = .Unknown
           return self
        }
      public var hasPurchaseToken:Bool {
           get {
                return builderResult.hasPurchaseToken
           }
      }
      public var purchaseToken:String {
           get {
                return builderResult.purchaseToken
           }
           set (value) {
               builderResult.hasPurchaseToken = true
               builderResult.purchaseToken = value
           }
      }
      public func setPurchaseToken(value:String) -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder {
        self.purchaseToken = value
        return self
      }
      public func clearPurchaseToken() -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder{
           builderResult.hasPurchaseToken = false
           builderResult.purchaseToken = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder {
        builderResult = Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder {
        return try Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse {
        let returnMe:Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder {
        if other == Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse() {
         return self
        }
        if other.hasResult {
             result = other.result
        }
        if other.hasPurchaseToken {
             purchaseToken = other.purchaseToken
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntresult = try input.readEnum()
            if let enumsresult = Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Status(rawValue:valueIntresult){
                 result = enumsresult
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntresult))
            }

          case 18:
            purchaseToken = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder()
        if let jsonValueResult = jsonMap["result"] as? String {
          resultDecodedBuilder.result = try Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Status.fromString(jsonValueResult)
        }
        if let jsonValuePurchaseToken = jsonMap["purchaseToken"] as? String {
          resultDecodedBuilder.purchaseToken = jsonValuePurchaseToken
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Platform.Responses.BuyItemAndroidResponse.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class BuyItemPokeCoinsResponse : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      // THESE ARE SOMEWHAT SPECULATED, should be a NOT ENOUGH ROOM status too for bag being full somewhere.
      public enum Status:Int32, CustomDebugStringConvertible, CustomStringConvertible {
        case Unknown = 0
        case Success = 1
        case NotEnoughPokecoins = 3
        public func toString() -> String {
          switch self {
          case .Unknown: return "UNKNOWN"
          case .Success: return "SUCCESS"
          case .NotEnoughPokecoins: return "NOT_ENOUGH_POKECOINS"
          }
        }
        public static func fromString(str:String) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Status {
          switch str {
          case "UNKNOWN":  return .Unknown
          case "SUCCESS":  return .Success
          case "NOT_ENOUGH_POKECOINS":  return .NotEnoughPokecoins
          default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
          }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
                case .Unknown: return ".Unknown"
                case .Success: return ".Success"
                case .NotEnoughPokecoins: return ".NotEnoughPokecoins"
            }
        }
      }

      //Enum type declaration end 

    public private(set) var result:Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Status = Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Status.Unknown
    public private(set) var hasResult:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasResult {
        try output.writeEnum(1, value:result.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasResult) {
        serialize_size += result.rawValue.computeEnumSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse> {
      var mergedArray = Array<Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse? {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Platform.Responses.PogoprotosNetworkingPlatformResponsesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder {
      return Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.classBuilder() as! Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder {
      return classBuilder() as! Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasResult {
        jsonMap["result"] = result.toString()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse {
      return try Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasResult) {
        output += "\(indent) result: \(result.description)\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasResult {
               hashCode = (hashCode &* 31) &+ Int(result.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse = Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse()
      public func getMessage() -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasResult:Bool{
            get {
                return builderResult.hasResult
            }
        }
        public var result:Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Status {
            get {
                return builderResult.result
            }
            set (value) {
                builderResult.hasResult = true
                builderResult.result = value
            }
        }
        public func setResult(value:Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Status) -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder {
          self.result = value
          return self
        }
        public func clearResult() -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder {
           builderResult.hasResult = false
           builderResult.result = .Unknown
           return self
        }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder {
        builderResult = Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder {
        return try Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse {
        let returnMe:Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder {
        if other == Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse() {
         return self
        }
        if other.hasResult {
             result = other.result
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntresult = try input.readEnum()
            if let enumsresult = Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Status(rawValue:valueIntresult){
                 result = enumsresult
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntresult))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder()
        if let jsonValueResult = jsonMap["result"] as? String {
          resultDecodedBuilder.result = try Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Status.fromString(jsonValueResult)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Platform.Responses.BuyItemPokeCoinsResponse.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class GetStoreItemsResponse : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class StoreItem : GeneratedMessage, GeneratedMessageProtocol {


        //Nested type declaration start

          final public class TagsEntry : GeneratedMessage, GeneratedMessageProtocol {
            public private(set) var hasKey:Bool = false
            public private(set) var key:String = ""

            public private(set) var hasValue:Bool = false
            public private(set) var value:String = ""

            required public init() {
                 super.init()
            }
            override public func isInitialized() -> Bool {
             return true
            }
            override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
              if hasKey {
                try output.writeString(1, value:key)
              }
              if hasValue {
                try output.writeString(2, value:value)
              }
              try unknownFields.writeToCodedOutputStream(output)
            }
            override public func serializedSize() -> Int32 {
              var serialize_size:Int32 = memoizedSerializedSize
              if serialize_size != -1 {
               return serialize_size
              }

              serialize_size = 0
              if hasKey {
                serialize_size += key.computeStringSize(1)
              }
              if hasValue {
                serialize_size += value.computeStringSize(2)
              }
              serialize_size += unknownFields.serializedSize()
              memoizedSerializedSize = serialize_size
              return serialize_size
            }
            public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry> {
              var mergedArray = Array<Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry>()
              while let value = try parseFromDelimitedFromInputStream(input) {
                mergedArray += [value]
              }
              return mergedArray
            }
            public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry? {
              return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder().mergeDelimitedFromInputStream(input)?.build()
            }
            public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry {
              return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Platform.Responses.PogoprotosNetworkingPlatformResponsesRoot.sharedInstance.extensionRegistry).build()
            }
            public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry {
              return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry {
              return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder().mergeFromInputStream(input).build()
            }
            public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry {
              return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry {
              return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder().mergeFromCodedInputStream(input).build()
            }
            public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry {
              return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func getBuilder() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder {
              return Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.classBuilder() as! Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder
            }
            public func getBuilder() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder {
              return classBuilder() as! Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder
            }
            override public class func classBuilder() -> MessageBuilder {
              return Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder()
            }
            override public func classBuilder() -> MessageBuilder {
              return Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder()
            }
            public func toBuilder() throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder {
              return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.builderWithPrototype(self)
            }
            public class func builderWithPrototype(prototype:Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder {
              return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder().mergeFrom(prototype)
            }
            override public func encode() throws -> Dictionary<String,AnyObject> {
              guard isInitialized() else {
                throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
              }

              var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
              if hasKey {
                jsonMap["key"] = key
              }
              if hasValue {
                jsonMap["value"] = value
              }
              return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry {
              return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder.decodeToBuilder(jsonMap).build()
            }
            override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry {
              return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder.fromJSONToBuilder(data).build()
            }
            override public func getDescription(indent:String) throws -> String {
              var output = ""
              if hasKey {
                output += "\(indent) key: \(key) \n"
              }
              if hasValue {
                output += "\(indent) value: \(value) \n"
              }
              output += unknownFields.getDescription(indent)
              return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasKey {
                       hashCode = (hashCode &* 31) &+ key.hashValue
                    }
                    if hasValue {
                       hashCode = (hashCode &* 31) &+ value.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry"
            }
            override public func className() -> String {
                return "Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry"
            }
            override public func classMetaType() -> GeneratedMessage.Type {
                return Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.self
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
              private var builderResult:Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry = Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry()
              public func getMessage() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry {
                  return builderResult
              }

              required override public init () {
                 super.init()
              }
              public var hasKey:Bool {
                   get {
                        return builderResult.hasKey
                   }
              }
              public var key:String {
                   get {
                        return builderResult.key
                   }
                   set (value) {
                       builderResult.hasKey = true
                       builderResult.key = value
                   }
              }
              public func setKey(value:String) -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder {
                self.key = value
                return self
              }
              public func clearKey() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder{
                   builderResult.hasKey = false
                   builderResult.key = ""
                   return self
              }
              public var hasValue:Bool {
                   get {
                        return builderResult.hasValue
                   }
              }
              public var value:String {
                   get {
                        return builderResult.value
                   }
                   set (value) {
                       builderResult.hasValue = true
                       builderResult.value = value
                   }
              }
              public func setValue(value:String) -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder {
                self.value = value
                return self
              }
              public func clearValue() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder{
                   builderResult.hasValue = false
                   builderResult.value = ""
                   return self
              }
              override public var internalGetResult:GeneratedMessage {
                   get {
                      return builderResult
                   }
              }
              override public func clear() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder {
                builderResult = Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry()
                return self
              }
              override public func clone() throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder {
                return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.builderWithPrototype(builderResult)
              }
              override public func build() throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry {
                   try checkInitialized()
                   return buildPartial()
              }
              public func buildPartial() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry {
                let returnMe:Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry = builderResult
                return returnMe
              }
              public func mergeFrom(other:Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder {
                if other == Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry() {
                 return self
                }
                if other.hasKey {
                     key = other.key
                }
                if other.hasValue {
                     value = other.value
                }
                try mergeUnknownFields(other.unknownFields)
                return self
              }
              override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder {
                   return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
              }
              override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                while (true) {
                  let protobufTag = try input.readTag()
                  switch protobufTag {
                  case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                  case 10:
                    key = try input.readString()

                  case 18:
                    value = try input.readString()

                  default:
                    if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                       unknownFields = try unknownFieldsBuilder.build()
                       return self
                    }
                  }
                }
              }
              override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder {
                let resultDecodedBuilder = Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder()
                if let jsonValueKey = jsonMap["key"] as? String {
                  resultDecodedBuilder.key = jsonValueKey
                }
                if let jsonValueValue = jsonMap["value"] as? String {
                  resultDecodedBuilder.value = jsonValueValue
                }
                return resultDecodedBuilder
              }
              override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder {
                let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
                  throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
                }
                return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder.decodeToBuilder(jsDataCast)
              }
            }

          }

        //Nested type declaration end

        // Internal ID (probably for Google Play/App Store) example: "pgorelease.incenseordinary.1"
        public private(set) var hasItemId:Bool = false
        public private(set) var itemId:String = ""

        // If true, this item is bought with real currency (USD, etc.) through the Play/App Store instead of Pokecoins
        public private(set) var hasIsIap:Bool = false
        public private(set) var isIap:Bool = false

        public private(set) var hasCurrencyToBuy:Bool = false
        public private(set) var currencyToBuy:Pogoprotos.Data.Player.Currency!
        public private(set) var hasYieldsCurrency:Bool = false
        public private(set) var yieldsCurrency:Pogoprotos.Data.Player.Currency!
        public private(set) var hasYieldsItem:Bool = false
        public private(set) var yieldsItem:Pogoprotos.Inventory.Item.ItemData!
        public private(set) var hasTags:Bool = false
        public private(set) var tags:Dictionary<String,String> = Dictionary<String,String>()

        // Possibly something to toggle visibility in the store/purchasibility?
        public private(set) var hasUnknown7:Bool = false
        public private(set) var unknown7:Int32 = Int32(0)

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasItemId {
            try output.writeString(1, value:itemId)
          }
          if hasIsIap {
            try output.writeBool(2, value:isIap)
          }
          if hasCurrencyToBuy {
            try output.writeMessage(3, value:currencyToBuy)
          }
          if hasYieldsCurrency {
            try output.writeMessage(4, value:yieldsCurrency)
          }
          if hasYieldsItem {
            try output.writeMessage(5, value:yieldsItem)
          }
          if hasTags {
              for (keyTags, valueTags) in tags {
                  let valueOfTags = try! Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder().setKey(keyTags).setValue(valueTags).build()
                  try output.writeMessage(6, value:valueOfTags)
              }
          }
          if hasUnknown7 {
            try output.writeInt32(7, value:unknown7)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasItemId {
            serialize_size += itemId.computeStringSize(1)
          }
          if hasIsIap {
            serialize_size += isIap.computeBoolSize(2)
          }
          if hasCurrencyToBuy {
              if let varSizecurrencyToBuy = currencyToBuy?.computeMessageSize(3) {
                  serialize_size += varSizecurrencyToBuy
              }
          }
          if hasYieldsCurrency {
              if let varSizeyieldsCurrency = yieldsCurrency?.computeMessageSize(4) {
                  serialize_size += varSizeyieldsCurrency
              }
          }
          if hasYieldsItem {
              if let varSizeyieldsItem = yieldsItem?.computeMessageSize(5) {
                  serialize_size += varSizeyieldsItem
              }
          }
          if hasTags {
              for (keyTags, valueTags) in tags {
                  let valueOfTags = try! Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder().setKey(keyTags).setValue(valueTags).build()
                  serialize_size += valueOfTags.computeMessageSize(6)
              }
          }
          if hasUnknown7 {
            serialize_size += unknown7.computeInt32Size(7)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem> {
          var mergedArray = Array<Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem? {
          return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem {
          return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Platform.Responses.PogoprotosNetworkingPlatformResponsesRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem {
          return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem {
          return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem {
          return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem {
          return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem {
          return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
          return Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.classBuilder() as! Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
          return classBuilder() as! Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
          return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
          return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasItemId {
            jsonMap["itemId"] = itemId
          }
          if hasIsIap {
            jsonMap["isIap"] = isIap
          }
          if hasCurrencyToBuy {
            jsonMap["currencyToBuy"] = try currencyToBuy.encode()
          }
          if hasYieldsCurrency {
            jsonMap["yieldsCurrency"] = try yieldsCurrency.encode()
          }
          if hasYieldsItem {
            jsonMap["yieldsItem"] = try yieldsItem.encode()
          }
          if hasTags {
              var mapTags = Dictionary<String, String>()
              for (keyTags, valueTags) in tags {
                  mapTags["\(keyTags)"] = valueTags
              }
              jsonMap["tags"] = mapTags
          }
          if hasUnknown7 {
            jsonMap["unknown7"] = NSNumber(int:unknown7)
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem {
          return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem {
          return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasItemId {
            output += "\(indent) itemId: \(itemId) \n"
          }
          if hasIsIap {
            output += "\(indent) isIap: \(isIap) \n"
          }
          if hasCurrencyToBuy {
            output += "\(indent) currencyToBuy {\n"
            if let outDescCurrencyToBuy = currencyToBuy {
              output += try outDescCurrencyToBuy.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasYieldsCurrency {
            output += "\(indent) yieldsCurrency {\n"
            if let outDescYieldsCurrency = yieldsCurrency {
              output += try outDescYieldsCurrency.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasYieldsItem {
            output += "\(indent) yieldsItem {\n"
            if let outDescYieldsItem = yieldsItem {
              output += try outDescYieldsItem.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasTags {
            output += "\(indent) tags: \(tags) \n"
          }
          if hasUnknown7 {
            output += "\(indent) unknown7: \(unknown7) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasItemId {
                   hashCode = (hashCode &* 31) &+ itemId.hashValue
                }
                if hasIsIap {
                   hashCode = (hashCode &* 31) &+ isIap.hashValue
                }
                if hasCurrencyToBuy {
                    if let hashValuecurrencyToBuy = currencyToBuy?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuecurrencyToBuy
                    }
                }
                if hasYieldsCurrency {
                    if let hashValueyieldsCurrency = yieldsCurrency?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueyieldsCurrency
                    }
                }
                if hasYieldsItem {
                    if let hashValueyieldsItem = yieldsItem?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueyieldsItem
                    }
                }
                if hasTags {
                    for (keyTags, valueTags) in tags {
                        hashCode = (hashCode &* 31) &+ keyTags.hashValue
                        hashCode = (hashCode &* 31) &+ valueTags.hashValue
                    }
                }
                if hasUnknown7 {
                   hashCode = (hashCode &* 31) &+ unknown7.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem = Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem()
          public func getMessage() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasItemId:Bool {
               get {
                    return builderResult.hasItemId
               }
          }
          public var itemId:String {
               get {
                    return builderResult.itemId
               }
               set (value) {
                   builderResult.hasItemId = true
                   builderResult.itemId = value
               }
          }
          public func setItemId(value:String) -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            self.itemId = value
            return self
          }
          public func clearItemId() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder{
               builderResult.hasItemId = false
               builderResult.itemId = ""
               return self
          }
          public var hasIsIap:Bool {
               get {
                    return builderResult.hasIsIap
               }
          }
          public var isIap:Bool {
               get {
                    return builderResult.isIap
               }
               set (value) {
                   builderResult.hasIsIap = true
                   builderResult.isIap = value
               }
          }
          public func setIsIap(value:Bool) -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            self.isIap = value
            return self
          }
          public func clearIsIap() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder{
               builderResult.hasIsIap = false
               builderResult.isIap = false
               return self
          }
          public var hasCurrencyToBuy:Bool {
               get {
                   return builderResult.hasCurrencyToBuy
               }
          }
          public var currencyToBuy:Pogoprotos.Data.Player.Currency! {
               get {
                   if currencyToBuyBuilder_ != nil {
                      builderResult.currencyToBuy = currencyToBuyBuilder_.getMessage()
                   }
                   return builderResult.currencyToBuy
               }
               set (value) {
                   builderResult.hasCurrencyToBuy = true
                   builderResult.currencyToBuy = value
               }
          }
          private var currencyToBuyBuilder_:Pogoprotos.Data.Player.Currency.Builder! {
               didSet {
                  builderResult.hasCurrencyToBuy = true
               }
          }
          public func getCurrencyToBuyBuilder() -> Pogoprotos.Data.Player.Currency.Builder {
            if currencyToBuyBuilder_ == nil {
               currencyToBuyBuilder_ = Pogoprotos.Data.Player.Currency.Builder()
               builderResult.currencyToBuy = currencyToBuyBuilder_.getMessage()
               if currencyToBuy != nil {
                  try! currencyToBuyBuilder_.mergeFrom(currencyToBuy)
               }
            }
            return currencyToBuyBuilder_
          }
          public func setCurrencyToBuy(value:Pogoprotos.Data.Player.Currency!) -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            self.currencyToBuy = value
            return self
          }
          public func mergeCurrencyToBuy(value:Pogoprotos.Data.Player.Currency) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            if builderResult.hasCurrencyToBuy {
              builderResult.currencyToBuy = try Pogoprotos.Data.Player.Currency.builderWithPrototype(builderResult.currencyToBuy).mergeFrom(value).buildPartial()
            } else {
              builderResult.currencyToBuy = value
            }
            builderResult.hasCurrencyToBuy = true
            return self
          }
          public func clearCurrencyToBuy() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            currencyToBuyBuilder_ = nil
            builderResult.hasCurrencyToBuy = false
            builderResult.currencyToBuy = nil
            return self
          }
          public var hasYieldsCurrency:Bool {
               get {
                   return builderResult.hasYieldsCurrency
               }
          }
          public var yieldsCurrency:Pogoprotos.Data.Player.Currency! {
               get {
                   if yieldsCurrencyBuilder_ != nil {
                      builderResult.yieldsCurrency = yieldsCurrencyBuilder_.getMessage()
                   }
                   return builderResult.yieldsCurrency
               }
               set (value) {
                   builderResult.hasYieldsCurrency = true
                   builderResult.yieldsCurrency = value
               }
          }
          private var yieldsCurrencyBuilder_:Pogoprotos.Data.Player.Currency.Builder! {
               didSet {
                  builderResult.hasYieldsCurrency = true
               }
          }
          public func getYieldsCurrencyBuilder() -> Pogoprotos.Data.Player.Currency.Builder {
            if yieldsCurrencyBuilder_ == nil {
               yieldsCurrencyBuilder_ = Pogoprotos.Data.Player.Currency.Builder()
               builderResult.yieldsCurrency = yieldsCurrencyBuilder_.getMessage()
               if yieldsCurrency != nil {
                  try! yieldsCurrencyBuilder_.mergeFrom(yieldsCurrency)
               }
            }
            return yieldsCurrencyBuilder_
          }
          public func setYieldsCurrency(value:Pogoprotos.Data.Player.Currency!) -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            self.yieldsCurrency = value
            return self
          }
          public func mergeYieldsCurrency(value:Pogoprotos.Data.Player.Currency) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            if builderResult.hasYieldsCurrency {
              builderResult.yieldsCurrency = try Pogoprotos.Data.Player.Currency.builderWithPrototype(builderResult.yieldsCurrency).mergeFrom(value).buildPartial()
            } else {
              builderResult.yieldsCurrency = value
            }
            builderResult.hasYieldsCurrency = true
            return self
          }
          public func clearYieldsCurrency() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            yieldsCurrencyBuilder_ = nil
            builderResult.hasYieldsCurrency = false
            builderResult.yieldsCurrency = nil
            return self
          }
          public var hasYieldsItem:Bool {
               get {
                   return builderResult.hasYieldsItem
               }
          }
          public var yieldsItem:Pogoprotos.Inventory.Item.ItemData! {
               get {
                   if yieldsItemBuilder_ != nil {
                      builderResult.yieldsItem = yieldsItemBuilder_.getMessage()
                   }
                   return builderResult.yieldsItem
               }
               set (value) {
                   builderResult.hasYieldsItem = true
                   builderResult.yieldsItem = value
               }
          }
          private var yieldsItemBuilder_:Pogoprotos.Inventory.Item.ItemData.Builder! {
               didSet {
                  builderResult.hasYieldsItem = true
               }
          }
          public func getYieldsItemBuilder() -> Pogoprotos.Inventory.Item.ItemData.Builder {
            if yieldsItemBuilder_ == nil {
               yieldsItemBuilder_ = Pogoprotos.Inventory.Item.ItemData.Builder()
               builderResult.yieldsItem = yieldsItemBuilder_.getMessage()
               if yieldsItem != nil {
                  try! yieldsItemBuilder_.mergeFrom(yieldsItem)
               }
            }
            return yieldsItemBuilder_
          }
          public func setYieldsItem(value:Pogoprotos.Inventory.Item.ItemData!) -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            self.yieldsItem = value
            return self
          }
          public func mergeYieldsItem(value:Pogoprotos.Inventory.Item.ItemData) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            if builderResult.hasYieldsItem {
              builderResult.yieldsItem = try Pogoprotos.Inventory.Item.ItemData.builderWithPrototype(builderResult.yieldsItem).mergeFrom(value).buildPartial()
            } else {
              builderResult.yieldsItem = value
            }
            builderResult.hasYieldsItem = true
            return self
          }
          public func clearYieldsItem() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            yieldsItemBuilder_ = nil
            builderResult.hasYieldsItem = false
            builderResult.yieldsItem = nil
            return self
          }
          public var hasTags:Bool {
               get {
                    return builderResult.hasTags
               }
          }
          public var tags:Dictionary<String,String> {
               get {
                    return builderResult.tags
               }
               set (value) {
                   builderResult.hasTags = true
                   builderResult.tags = value
               }
          }
          public func setTags(value:Dictionary<String,String>) -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            self.tags = value
            return self
          }
          public func clearTags() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder{
               builderResult.hasTags = false
               builderResult.tags = Dictionary<String,String>()
               return self
          }
          public var hasUnknown7:Bool {
               get {
                    return builderResult.hasUnknown7
               }
          }
          public var unknown7:Int32 {
               get {
                    return builderResult.unknown7
               }
               set (value) {
                   builderResult.hasUnknown7 = true
                   builderResult.unknown7 = value
               }
          }
          public func setUnknown7(value:Int32) -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            self.unknown7 = value
            return self
          }
          public func clearUnknown7() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder{
               builderResult.hasUnknown7 = false
               builderResult.unknown7 = Int32(0)
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            builderResult = Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem {
            let returnMe:Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            if other == Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem() {
             return self
            }
            if other.hasItemId {
                 itemId = other.itemId
            }
            if other.hasIsIap {
                 isIap = other.isIap
            }
            if (other.hasCurrencyToBuy) {
                try mergeCurrencyToBuy(other.currencyToBuy)
            }
            if (other.hasYieldsCurrency) {
                try mergeYieldsCurrency(other.yieldsCurrency)
            }
            if (other.hasYieldsItem) {
                try mergeYieldsItem(other.yieldsItem)
            }
            if other.hasTags {
                 tags = other.tags
            }
            if other.hasUnknown7 {
                 unknown7 = other.unknown7
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10:
                itemId = try input.readString()

              case 16:
                isIap = try input.readBool()

              case 26:
                let subBuilder:Pogoprotos.Data.Player.Currency.Builder = Pogoprotos.Data.Player.Currency.Builder()
                if hasCurrencyToBuy {
                  try subBuilder.mergeFrom(currencyToBuy)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                currencyToBuy = subBuilder.buildPartial()

              case 34:
                let subBuilder:Pogoprotos.Data.Player.Currency.Builder = Pogoprotos.Data.Player.Currency.Builder()
                if hasYieldsCurrency {
                  try subBuilder.mergeFrom(yieldsCurrency)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                yieldsCurrency = subBuilder.buildPartial()

              case 42:
                let subBuilder:Pogoprotos.Inventory.Item.ItemData.Builder = Pogoprotos.Inventory.Item.ItemData.Builder()
                if hasYieldsItem {
                  try subBuilder.mergeFrom(yieldsItem)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                yieldsItem = subBuilder.buildPartial()

              case 50:
                let subBuilder = Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                let buildOfTags = subBuilder.buildPartial()
                tags[buildOfTags.key] = buildOfTags.value

              case 56:
                unknown7 = try input.readInt32()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder()
            if let jsonValueItemId = jsonMap["itemId"] as? String {
              resultDecodedBuilder.itemId = jsonValueItemId
            }
            if let jsonValueIsIap = jsonMap["isIap"] as? Bool {
              resultDecodedBuilder.isIap = jsonValueIsIap
            }
            if let jsonValueCurrencyToBuy = jsonMap["currencyToBuy"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.currencyToBuy = try Pogoprotos.Data.Player.Currency.Builder.decodeToBuilder(jsonValueCurrencyToBuy).build()

            }
            if let jsonValueYieldsCurrency = jsonMap["yieldsCurrency"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.yieldsCurrency = try Pogoprotos.Data.Player.Currency.Builder.decodeToBuilder(jsonValueYieldsCurrency).build()

            }
            if let jsonValueYieldsItem = jsonMap["yieldsItem"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.yieldsItem = try Pogoprotos.Inventory.Item.ItemData.Builder.decodeToBuilder(jsonValueYieldsItem).build()

            }
            if let jsonValueTags = jsonMap["tags"] as? Dictionary<String, String> {
                var mapTags = Dictionary<String, String>()
                for (keyTags, valueTags) in jsonValueTags {
                    let keyFromTags = keyTags
                    mapTags[keyFromTags] = valueTags
                }
                resultDecodedBuilder.tags = mapTags
            }
            if let jsonValueUnknown7 = jsonMap["unknown7"] as? NSNumber {
              resultDecodedBuilder.unknown7 = jsonValueUnknown7.intValue
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end



      //Enum type declaration start 

      public enum Status:Int32, CustomDebugStringConvertible, CustomStringConvertible {
        case Undefined = 0
        case Okay = 1
        public func toString() -> String {
          switch self {
          case .Undefined: return "UNDEFINED"
          case .Okay: return "OKAY"
          }
        }
        public static func fromString(str:String) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Status {
          switch str {
          case "UNDEFINED":  return .Undefined
          case "OKAY":  return .Okay
          default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
          }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
                case .Undefined: return ".Undefined"
                case .Okay: return ".Okay"
            }
        }
      }

      //Enum type declaration end 

    public private(set) var status:Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Status = Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Status.Undefined
    public private(set) var hasStatus:Bool = false
    public private(set) var items:Array<Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem>  = Array<Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem>()
    public private(set) var playerCurrencies:Array<Pogoprotos.Data.Player.Currency>  = Array<Pogoprotos.Data.Player.Currency>()
    // Some base64 encoded stuff... (Developer payload?)
    public private(set) var hasUnknown4:Bool = false
    public private(set) var unknown4:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasStatus {
        try output.writeEnum(1, value:status.rawValue)
      }
      for oneElementItems in items {
          try output.writeMessage(2, value:oneElementItems)
      }
      for oneElementPlayerCurrencies in playerCurrencies {
          try output.writeMessage(3, value:oneElementPlayerCurrencies)
      }
      if hasUnknown4 {
        try output.writeString(4, value:unknown4)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasStatus) {
        serialize_size += status.rawValue.computeEnumSize(1)
      }
      for oneElementItems in items {
          serialize_size += oneElementItems.computeMessageSize(2)
      }
      for oneElementPlayerCurrencies in playerCurrencies {
          serialize_size += oneElementPlayerCurrencies.computeMessageSize(3)
      }
      if hasUnknown4 {
        serialize_size += unknown4.computeStringSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse> {
      var mergedArray = Array<Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse? {
      return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse {
      return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Platform.Responses.PogoprotosNetworkingPlatformResponsesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse {
      return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse {
      return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse {
      return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse {
      return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse {
      return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
      return Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.classBuilder() as! Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
      return classBuilder() as! Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
      return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
      return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasStatus {
        jsonMap["status"] = status.toString()
      }
      if !items.isEmpty {
        var jsonArrayItems:Array<Dictionary<String,AnyObject>> = []
          for oneValueItems in items {
            let ecodedMessageItems = try oneValueItems.encode()
            jsonArrayItems += [ecodedMessageItems]
          }
        jsonMap["items"] = jsonArrayItems
      }
      if !playerCurrencies.isEmpty {
        var jsonArrayPlayerCurrencies:Array<Dictionary<String,AnyObject>> = []
          for oneValuePlayerCurrencies in playerCurrencies {
            let ecodedMessagePlayerCurrencies = try oneValuePlayerCurrencies.encode()
            jsonArrayPlayerCurrencies += [ecodedMessagePlayerCurrencies]
          }
        jsonMap["playerCurrencies"] = jsonArrayPlayerCurrencies
      }
      if hasUnknown4 {
        jsonMap["unknown4"] = unknown4
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse {
      return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse {
      return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasStatus) {
        output += "\(indent) status: \(status.description)\n"
      }
      var itemsElementIndex:Int = 0
      for oneElementItems in items {
          output += "\(indent) items[\(itemsElementIndex)] {\n"
          output += try oneElementItems.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          itemsElementIndex += 1
      }
      var playerCurrenciesElementIndex:Int = 0
      for oneElementPlayerCurrencies in playerCurrencies {
          output += "\(indent) playerCurrencies[\(playerCurrenciesElementIndex)] {\n"
          output += try oneElementPlayerCurrencies.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          playerCurrenciesElementIndex += 1
      }
      if hasUnknown4 {
        output += "\(indent) unknown4: \(unknown4) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStatus {
               hashCode = (hashCode &* 31) &+ Int(status.rawValue)
            }
            for oneElementItems in items {
                hashCode = (hashCode &* 31) &+ oneElementItems.hashValue
            }
            for oneElementPlayerCurrencies in playerCurrencies {
                hashCode = (hashCode &* 31) &+ oneElementPlayerCurrencies.hashValue
            }
            if hasUnknown4 {
               hashCode = (hashCode &* 31) &+ unknown4.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse = Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse()
      public func getMessage() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasStatus:Bool{
            get {
                return builderResult.hasStatus
            }
        }
        public var status:Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Status {
            get {
                return builderResult.status
            }
            set (value) {
                builderResult.hasStatus = true
                builderResult.status = value
            }
        }
        public func setStatus(value:Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Status) -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
          self.status = value
          return self
        }
        public func clearStatus() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
           builderResult.hasStatus = false
           builderResult.status = .Undefined
           return self
        }
      public var items:Array<Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem> {
           get {
               return builderResult.items
           }
           set (value) {
               builderResult.items = value
           }
      }
      public func setItems(value:Array<Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem>) -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
        self.items = value
        return self
      }
      public func clearItems() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
        builderResult.items.removeAll(keepCapacity: false)
        return self
      }
      public var playerCurrencies:Array<Pogoprotos.Data.Player.Currency> {
           get {
               return builderResult.playerCurrencies
           }
           set (value) {
               builderResult.playerCurrencies = value
           }
      }
      public func setPlayerCurrencies(value:Array<Pogoprotos.Data.Player.Currency>) -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
        self.playerCurrencies = value
        return self
      }
      public func clearPlayerCurrencies() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
        builderResult.playerCurrencies.removeAll(keepCapacity: false)
        return self
      }
      public var hasUnknown4:Bool {
           get {
                return builderResult.hasUnknown4
           }
      }
      public var unknown4:String {
           get {
                return builderResult.unknown4
           }
           set (value) {
               builderResult.hasUnknown4 = true
               builderResult.unknown4 = value
           }
      }
      public func setUnknown4(value:String) -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
        self.unknown4 = value
        return self
      }
      public func clearUnknown4() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder{
           builderResult.hasUnknown4 = false
           builderResult.unknown4 = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
        builderResult = Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
        return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse {
        let returnMe:Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
        if other == Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse() {
         return self
        }
        if other.hasStatus {
             status = other.status
        }
        if !other.items.isEmpty  {
           builderResult.items += other.items
        }
        if !other.playerCurrencies.isEmpty  {
           builderResult.playerCurrencies += other.playerCurrencies
        }
        if other.hasUnknown4 {
             unknown4 = other.unknown4
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntstatus = try input.readEnum()
            if let enumsstatus = Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Status(rawValue:valueIntstatus){
                 status = enumsstatus
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntstatus))
            }

          case 18:
            let subBuilder = Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            items += [subBuilder.buildPartial()]

          case 26:
            let subBuilder = Pogoprotos.Data.Player.Currency.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            playerCurrencies += [subBuilder.buildPartial()]

          case 34:
            unknown4 = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder()
        if let jsonValueStatus = jsonMap["status"] as? String {
          resultDecodedBuilder.status = try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Status.fromString(jsonValueStatus)
        }
        if let jsonValueItems = jsonMap["items"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayItems:Array<Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem> = []
          for oneValueItems in jsonValueItems {
            let messageFromStringItems = try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.Builder.decodeToBuilder(oneValueItems).build()

            jsonArrayItems += [messageFromStringItems]
          }
          resultDecodedBuilder.items = jsonArrayItems
        }
        if let jsonValuePlayerCurrencies = jsonMap["playerCurrencies"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayPlayerCurrencies:Array<Pogoprotos.Data.Player.Currency> = []
          for oneValuePlayerCurrencies in jsonValuePlayerCurrencies {
            let messageFromStringPlayerCurrencies = try Pogoprotos.Data.Player.Currency.Builder.decodeToBuilder(oneValuePlayerCurrencies).build()

            jsonArrayPlayerCurrencies += [messageFromStringPlayerCurrencies]
          }
          resultDecodedBuilder.playerCurrencies = jsonArrayPlayerCurrencies
        }
        if let jsonValueUnknown4 = jsonMap["unknown4"] as? String {
          resultDecodedBuilder.unknown4 = jsonValueUnknown4
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Platform.Responses.GetStoreItemsResponse.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class SendEncryptedSignatureResponse : GeneratedMessage, GeneratedMessageProtocol {
    // speculated, could be an enum
    public private(set) var hasReceived:Bool = false
    public private(set) var received:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasReceived {
        try output.writeBool(1, value:received)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasReceived {
        serialize_size += received.computeBoolSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse> {
      var mergedArray = Array<Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse? {
      return try Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse {
      return try Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Platform.Responses.PogoprotosNetworkingPlatformResponsesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse {
      return try Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse {
      return try Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse {
      return try Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse {
      return try Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse {
      return try Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder {
      return Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.classBuilder() as! Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder {
      return classBuilder() as! Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder {
      return try Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse) throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder {
      return try Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasReceived {
        jsonMap["received"] = received
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse {
      return try Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse {
      return try Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasReceived {
        output += "\(indent) received: \(received) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasReceived {
               hashCode = (hashCode &* 31) &+ received.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse = Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse()
      public func getMessage() -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasReceived:Bool {
           get {
                return builderResult.hasReceived
           }
      }
      public var received:Bool {
           get {
                return builderResult.received
           }
           set (value) {
               builderResult.hasReceived = true
               builderResult.received = value
           }
      }
      public func setReceived(value:Bool) -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder {
        self.received = value
        return self
      }
      public func clearReceived() -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder{
           builderResult.hasReceived = false
           builderResult.received = false
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder {
        builderResult = Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder {
        return try Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse {
        let returnMe:Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse) throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder {
        if other == Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse() {
         return self
        }
        if other.hasReceived {
             received = other.received
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            received = try input.readBool()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder()
        if let jsonValueReceived = jsonMap["received"] as? Bool {
          resultDecodedBuilder.received = jsonValueReceived
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Platform.Responses.SendEncryptedSignatureResponse.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
